{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\udc2e + \ud83d\udc0b = \ud83d\udc95 \u00b6 Help mailcow \u00b6 Let us know about your ideas in #mailcow @ Freenode or in our Telegram channel @ t.me/mailcow . Please consider a support contract for a small monthly fee at Servercow EN / Servercow DE to support further development. We support you while you support us . :) If you are super awesome and would like to support without a contract, you can get a SAL license that confirms your awesomeness (a flexible one-time payment) at Servercow EN / Servercow DE . Get support \u00b6 There are two ways to achieve support for your mailcow installation. Commercial support \u00b6 For professional and prioritized commercial support you can sign a basic support subscription at Servercow EN / Servercow DE . For custom inquiries or questions please contact us at info@servercow.de instead. Furthermore we do also provide a fully featured and managed mailcow here . This way we take care about the technical magic underneath and you can enjoy your whole mail experience in a hassle-free way. Community support \u00b6 The other alternative is our free community-support on our various channels below. Please notice, that this support is driven by our awesome community around mailcow. This kind of support is best-effort, voluntary and there is no guarantee for anything. IRC @ Freenode, #mailcow Telegram @ t.me/mailcow For bug tracking, feature requests and code contributions only : GitHub @ mailcow/mailcow-dockerized Demo \u00b6 You can find a demo at demo.mailcow.email , use the following credentials to login: Administrator : admin / moohoo Domain administrator : department / moohoo Mailbox : demo@mailcow.email / moohoo Overview \u00b6 The integrated mailcow UI allows administrative work on your mail server instance as well as separated domain administrator and mailbox user access: DKIM and ARC support Black- and whitelists per domain and per user Spam score management per-user (reject spam, mark spam, greylist) Allow mailbox users to create temporary spam aliases Prepend mail tags to subject or move mail to sub folder (per-user) Allow mailbox users to toggle incoming and outgoing TLS enforcement Allow users to reset SOGo ActiveSync device caches imapsync to migrate or pull remote mailboxes regularly TFA: Yubikey OTP and U2F USB (Google Chrome and derivatives only), TOTP Add domains, mailboxes, aliases, domain aliases and SOGo resources Add whitelisted hosts to forward mail to mailcow Fail2ban-like integration Quarantine system Antivirus scanning incl. macro scanning in office documents Integrated basic monitoring A lot more... mailcow: dockerized comes with multiple containers linked in one bridged network. Each container represents a single application. Dovecot ClamAV (optional) Solr (optional) Oletools via Olefy Memcached Redis MariaDB Unbound PHP Postfix ACME Nginx Rspamd SOGo Netfilter (Fail2ban-like integration by @mkuron ) A Watchdog to provide basic monitoring Docker volumes to keep dynamic data - take care of them! vmail-vol-1 solr-vol-1 redis-vol-1 mysql-vol-1 rspamd-vol-1 postfix-vol-1 crypt-vol-1","title":"Information & Support"},{"location":"#_1","text":"","title":"\ud83d\udc2e + \ud83d\udc0b = \ud83d\udc95"},{"location":"#help-mailcow","text":"Let us know about your ideas in #mailcow @ Freenode or in our Telegram channel @ t.me/mailcow . Please consider a support contract for a small monthly fee at Servercow EN / Servercow DE to support further development. We support you while you support us . :) If you are super awesome and would like to support without a contract, you can get a SAL license that confirms your awesomeness (a flexible one-time payment) at Servercow EN / Servercow DE .","title":"Help mailcow"},{"location":"#get-support","text":"There are two ways to achieve support for your mailcow installation.","title":"Get support"},{"location":"#commercial-support","text":"For professional and prioritized commercial support you can sign a basic support subscription at Servercow EN / Servercow DE . For custom inquiries or questions please contact us at info@servercow.de instead. Furthermore we do also provide a fully featured and managed mailcow here . This way we take care about the technical magic underneath and you can enjoy your whole mail experience in a hassle-free way.","title":"Commercial support"},{"location":"#community-support","text":"The other alternative is our free community-support on our various channels below. Please notice, that this support is driven by our awesome community around mailcow. This kind of support is best-effort, voluntary and there is no guarantee for anything. IRC @ Freenode, #mailcow Telegram @ t.me/mailcow For bug tracking, feature requests and code contributions only : GitHub @ mailcow/mailcow-dockerized","title":"Community support"},{"location":"#demo","text":"You can find a demo at demo.mailcow.email , use the following credentials to login: Administrator : admin / moohoo Domain administrator : department / moohoo Mailbox : demo@mailcow.email / moohoo","title":"Demo"},{"location":"#overview","text":"The integrated mailcow UI allows administrative work on your mail server instance as well as separated domain administrator and mailbox user access: DKIM and ARC support Black- and whitelists per domain and per user Spam score management per-user (reject spam, mark spam, greylist) Allow mailbox users to create temporary spam aliases Prepend mail tags to subject or move mail to sub folder (per-user) Allow mailbox users to toggle incoming and outgoing TLS enforcement Allow users to reset SOGo ActiveSync device caches imapsync to migrate or pull remote mailboxes regularly TFA: Yubikey OTP and U2F USB (Google Chrome and derivatives only), TOTP Add domains, mailboxes, aliases, domain aliases and SOGo resources Add whitelisted hosts to forward mail to mailcow Fail2ban-like integration Quarantine system Antivirus scanning incl. macro scanning in office documents Integrated basic monitoring A lot more... mailcow: dockerized comes with multiple containers linked in one bridged network. Each container represents a single application. Dovecot ClamAV (optional) Solr (optional) Oletools via Olefy Memcached Redis MariaDB Unbound PHP Postfix ACME Nginx Rspamd SOGo Netfilter (Fail2ban-like integration by @mkuron ) A Watchdog to provide basic monitoring Docker volumes to keep dynamic data - take care of them! vmail-vol-1 solr-vol-1 redis-vol-1 mysql-vol-1 rspamd-vol-1 postfix-vol-1 crypt-vol-1","title":"Overview"},{"location":"b_n_r_backup/","text":"Backup \u00b6 You can use the provided script helper-scripts/backup_and_restore.sh to backup mailcow automatically. Please do not copy this script to another location. To run a backup, write \"backup\" as first parameter and either one or more components to backup as following parameters. You can also use \"all\" as second parameter to backup all components. # Syntax : # . / helper - scripts / backup_and_restore . sh backup ( vmail | crypt | redis | rspamd | postfix | mysql | all ) # Backup all . / helper - scripts / backup_and_restore . sh backup all # Backup vmail , crypt and mysql data . / helper - scripts / backup_and_restore . sh backup vmail crypt mysql The script will ask you for a backup location. Inside of this location it will create folders in the format \"mailcow_DATE\". You should not rename those folders to not break the restore process. To run a backup unattended, define MAILCOW_BACKUP_LOCATION as environment variable before starting the script: MAILCOW_BACKUP_LOCATION =/ opt / backup / opt / mailcow - dockerized / helper - scripts / backup_and_restore . sh backup all","title":"Backup"},{"location":"b_n_r_backup/#backup","text":"You can use the provided script helper-scripts/backup_and_restore.sh to backup mailcow automatically. Please do not copy this script to another location. To run a backup, write \"backup\" as first parameter and either one or more components to backup as following parameters. You can also use \"all\" as second parameter to backup all components. # Syntax : # . / helper - scripts / backup_and_restore . sh backup ( vmail | crypt | redis | rspamd | postfix | mysql | all ) # Backup all . / helper - scripts / backup_and_restore . sh backup all # Backup vmail , crypt and mysql data . / helper - scripts / backup_and_restore . sh backup vmail crypt mysql The script will ask you for a backup location. Inside of this location it will create folders in the format \"mailcow_DATE\". You should not rename those folders to not break the restore process. To run a backup unattended, define MAILCOW_BACKUP_LOCATION as environment variable before starting the script: MAILCOW_BACKUP_LOCATION =/ opt / backup / opt / mailcow - dockerized / helper - scripts / backup_and_restore . sh backup all","title":"Backup"},{"location":"b_n_r_restore/","text":"Restore \u00b6 Please do not copy this script to another location. To run a restore, start mailcow , use the script with \"restore\" as first parameter. # Syntax : # . / helper - scripts / backup_and_restore . sh restore The script will ask you for a backup location containing the mailcow_DATE folders.","title":"Restore"},{"location":"b_n_r_restore/#restore","text":"Please do not copy this script to another location. To run a restore, start mailcow , use the script with \"restore\" as first parameter. # Syntax : # . / helper - scripts / backup_and_restore . sh restore The script will ask you for a backup location containing the mailcow_DATE folders.","title":"Restore"},{"location":"client/","text":"mailcow supports a variety of email clients, both on desktop computers and on smartphones. Below, you can find a number of configuration guides that explain how to configure your mailcow account. Tip If you access this page by logging into your mailcow server and clicking the \"Show configuration guides for email clients and smartphones\" link, all of the guides will be personalized with your email address and server name. Success Since you accessed this page after logging into your mailcow server, all of the guides have been personalized with your email address and server name. Android Apple iOS / macOS eM Client KDE Kontact / KMail Microsoft Outlook Mozilla Thunderbird Windows Mail Windows Phone Manual configuration","title":"Overview"},{"location":"debug-admin_login_sogo/","text":"This is an experimental feature that allows admins and domain admins to directly log into SOGo as a mailbox user, without knowing the users password. For this, an additional link to SOGo is displayed in the mailbox list. Multiple concurrent admin-logins to different mailboxes are also possible when using this feature. Enabling the feature \u00b6 The feature is disabled by default. It can be enabled in the mailcow.conf by setting: ALLOW_ADMIN_EMAIL_LOGIN = y and restarting the affected containers with docker - compose up - d Drawbacks when enabled \u00b6 Each SOGo page-load and each Active-Sync request will cause an additional execution of an internal PHP script. This might impact load-times of SOGo / EAS. In most cases, this should not be noticeable but should be kept in mind if you face any performance issues. SOGo will not display a logout link for admin-logins, to login normally one has to logout from the mailcow UI so the PHP session is destroyed. Technical details \u00b6 SOGoTrustProxyAuthentication option is set to YES which makes SOGo trust the x-webobjects-remote-user header. Dovecot will receive a random master-password which is valid for all mailboxes when used by the SOGo container. Clicking on the SOGo button in the mailbox list will open sogo-auth.php which checks permissions, sets session variables and redirects to the SOGo mailbox. Each SOGo, CardDAV, CalDAV and EAS http request will cause an additional, nginx internal auth_request call to sogo-auth.php with the following behavior: If a basic_auth header is present, the script will validate the credentials in place of SOGo and provide the following headers: x-webobjects-remote-user , Authorization and x-webobjects-auth-type . If no basic_auth header is present, the script will check for an active mailcow admin session for the requested email user and provide the same headers but with the dovecot master password used in the Authorization header. If both fails the headers will be set empty, which makes SOGo use its standard authentication methods. All of these options / behaviors are disabled if the ALLOW_ADMIN_EMAIL_LOGIN is not enabled in the config.","title":"Admin login to SOGo"},{"location":"debug-admin_login_sogo/#enabling-the-feature","text":"The feature is disabled by default. It can be enabled in the mailcow.conf by setting: ALLOW_ADMIN_EMAIL_LOGIN = y and restarting the affected containers with docker - compose up - d","title":"Enabling the feature"},{"location":"debug-admin_login_sogo/#drawbacks-when-enabled","text":"Each SOGo page-load and each Active-Sync request will cause an additional execution of an internal PHP script. This might impact load-times of SOGo / EAS. In most cases, this should not be noticeable but should be kept in mind if you face any performance issues. SOGo will not display a logout link for admin-logins, to login normally one has to logout from the mailcow UI so the PHP session is destroyed.","title":"Drawbacks when enabled"},{"location":"debug-admin_login_sogo/#technical-details","text":"SOGoTrustProxyAuthentication option is set to YES which makes SOGo trust the x-webobjects-remote-user header. Dovecot will receive a random master-password which is valid for all mailboxes when used by the SOGo container. Clicking on the SOGo button in the mailbox list will open sogo-auth.php which checks permissions, sets session variables and redirects to the SOGo mailbox. Each SOGo, CardDAV, CalDAV and EAS http request will cause an additional, nginx internal auth_request call to sogo-auth.php with the following behavior: If a basic_auth header is present, the script will validate the credentials in place of SOGo and provide the following headers: x-webobjects-remote-user , Authorization and x-webobjects-auth-type . If no basic_auth header is present, the script will check for an active mailcow admin session for the requested email user and provide the same headers but with the dovecot master password used in the Authorization header. If both fails the headers will be set empty, which makes SOGo use its standard authentication methods. All of these options / behaviors are disabled if the ALLOW_ADMIN_EMAIL_LOGIN is not enabled in the config.","title":"Technical details"},{"location":"debug-attach_service/","text":"Attaching a Container to your Shell \u00b6 To attach a container to your shell you can simply run docker - compose exec $ Service_Name / bin / bash Connecting to Services \u00b6 If you want to connect to a service / application directly it is always a good idea to source mailcow.conf to get all relevant variables into your environment. MySQL \u00b6 source mailcow . conf docker - compose exec mysql - mailcow mysql - u ${ DBUSER } - p ${ DBPASS } ${ DBNAME } Redis \u00b6 docker - compose exec redis - mailcow redis - cli Service Descriptions \u00b6 Here is a brief overview of what container / service does what: Service Name Service Descriptions unbound-mailcow Local (DNSSEC) DNS Resolver mysql-mailcow Stores SOGo's and most of mailcow's settings postfix-mailcow Receives and sends mails dovecot-mailcow User logins and sieve filter redis-mailcow Storage back-end for DKIM keys and Rspamd rspamd-mailcow Mail filtering system. Used for av handling, dkim signing, spam handling clamd-mailcow Scans attachments for viruses sogo-mailcow Webmail client that handles Microsoft ActiveSync and Cal- / CardDav nginx-mailcow Nginx remote proxy that handles all mailcow related HTTP / HTTPS requests acme-mailcow Automates HTTPS (SSL/TLS) certificate deployment memcached-mailcow Internal caching system for mailcow services watchdog-mailcow Allows the monitoring of docker containers / services php-fpm-mailcow Powers the mailcow web UI netfilter-mailcow Fail2Ban like integration","title":"Attach a Container"},{"location":"debug-attach_service/#attaching-a-container-to-your-shell","text":"To attach a container to your shell you can simply run docker - compose exec $ Service_Name / bin / bash","title":"Attaching a Container to your Shell"},{"location":"debug-attach_service/#connecting-to-services","text":"If you want to connect to a service / application directly it is always a good idea to source mailcow.conf to get all relevant variables into your environment.","title":"Connecting to Services"},{"location":"debug-attach_service/#mysql","text":"source mailcow . conf docker - compose exec mysql - mailcow mysql - u ${ DBUSER } - p ${ DBPASS } ${ DBNAME }","title":"MySQL"},{"location":"debug-attach_service/#redis","text":"docker - compose exec redis - mailcow redis - cli","title":"Redis"},{"location":"debug-attach_service/#service-descriptions","text":"Here is a brief overview of what container / service does what: Service Name Service Descriptions unbound-mailcow Local (DNSSEC) DNS Resolver mysql-mailcow Stores SOGo's and most of mailcow's settings postfix-mailcow Receives and sends mails dovecot-mailcow User logins and sieve filter redis-mailcow Storage back-end for DKIM keys and Rspamd rspamd-mailcow Mail filtering system. Used for av handling, dkim signing, spam handling clamd-mailcow Scans attachments for viruses sogo-mailcow Webmail client that handles Microsoft ActiveSync and Cal- / CardDav nginx-mailcow Nginx remote proxy that handles all mailcow related HTTP / HTTPS requests acme-mailcow Automates HTTPS (SSL/TLS) certificate deployment memcached-mailcow Internal caching system for mailcow services watchdog-mailcow Allows the monitoring of docker containers / services php-fpm-mailcow Powers the mailcow web UI netfilter-mailcow Fail2Ban like integration","title":"Service Descriptions"},{"location":"debug-common_problems/","text":"Here we list common problems and possible solutions: Mail loops back to myself \u00b6 Please check in your mailcow UI if you made the domain a backup MX : I can receive but not send mails \u00b6 There are a lot of things that could prevent you from sending mail: Check if your IP is on any blacklists. You could use dnsbl.info or any other similar service to check for your IP. There are some consumer ISP routers out there, that block mail ports for non whitelisted domains. Please check if you can reach your server on the ports 465 or 587 : # telnet 74 . 125 . 133 . 27 465 Trying 74 . 125 . 133 . 27 ... Connected to 74 . 125 . 133 . 27 . Escape character is '^]' . My mails are identified as Spam \u00b6 Please read our guide on DNS configuration . docker-compose throws weird errors \u00b6 ... like: ERROR: Invalid interpolation format ... AttributeError: 'NoneType' object has no attribute 'keys' . ERROR: In file './docker-compose.yml' service 'version' doesn't have any configuration options . When you encounter one or similar messages while trying to run mailcow: dockerized please check if you have the latest version of Docker and docker-compose Container XY is unhealthy \u00b6 This error tries to tell you that one of the (health) conditions for a certain container are not met. Therefore it can't be started. This can have several reasons, the most common one is an updated git clone but old docker image or vice versa. A wrong configured firewall could also cause such a failure. The containers need to be able to talk to each other over the network 172.22.1.1/24. It might also be wrongly linked file (i.e. SSL certificate) that prevents a crucial container (nginx) from starting, so always check your logs to get an Idea where your problem is coming from. Address already in use \u00b6 If you get an error message like: ERROR : for postfix - mailcow Cannot start service postfix - mailcow : driver failed programming external connectivity on endpoint mailcowdockerized_postfix - mailcow_1 : Error starting userland proxy : listen tcp 0 . 0 . 0 . 0 : 25 : bind : address already in use while trying to start / install mailcow: dockerized, make sure you've followed our section on the prerequisites . XYZ can't connect to ... \u00b6 Please check your local firewall! Docker and iptables-based firewalls sometimes create conflicting rules, so disable the firewall on your host to determine whether your connection issues are caused by such conflicts. If they are, you need to manually create appropriate rules in your host firewall to permit the necessary connections. If you experience connection problems from home, please check your ISP router's firewall too, some of them block mail traffic on the SMTP (587) or SMTPS (465) ports. It could also be, that your ISP is blocking the ports for SUBMISSION (25). While Linux users can chose from a variety of tools 1 to check if a port is open, the Windows user has only the command telnet host port available by default (and it has to be activated since Windows Vista). To enable telnet on a Windows after Vista please check this guide or enter the following command in an terminal with administrator priviliges : dism / online / Enable - Feature / FeatureName : TelnetClient Inotify instance limit for user 5000 (UID vmail) exceeded ( see #453 ) \u00b6 Docker containers use the Docker hosts inotify limits. Setting them on your Docker host will pass them to the container. netcat , nmap , openssl , telnet , etc. \u21a9","title":"Common Problems"},{"location":"debug-common_problems/#mail-loops-back-to-myself","text":"Please check in your mailcow UI if you made the domain a backup MX :","title":"Mail loops back to myself"},{"location":"debug-common_problems/#i-can-receive-but-not-send-mails","text":"There are a lot of things that could prevent you from sending mail: Check if your IP is on any blacklists. You could use dnsbl.info or any other similar service to check for your IP. There are some consumer ISP routers out there, that block mail ports for non whitelisted domains. Please check if you can reach your server on the ports 465 or 587 : # telnet 74 . 125 . 133 . 27 465 Trying 74 . 125 . 133 . 27 ... Connected to 74 . 125 . 133 . 27 . Escape character is '^]' .","title":"I can receive but not send mails"},{"location":"debug-common_problems/#my-mails-are-identified-as-spam","text":"Please read our guide on DNS configuration .","title":"My mails are identified as Spam"},{"location":"debug-common_problems/#docker-compose-throws-weird-errors","text":"... like: ERROR: Invalid interpolation format ... AttributeError: 'NoneType' object has no attribute 'keys' . ERROR: In file './docker-compose.yml' service 'version' doesn't have any configuration options . When you encounter one or similar messages while trying to run mailcow: dockerized please check if you have the latest version of Docker and docker-compose","title":"docker-compose throws weird errors"},{"location":"debug-common_problems/#container-xy-is-unhealthy","text":"This error tries to tell you that one of the (health) conditions for a certain container are not met. Therefore it can't be started. This can have several reasons, the most common one is an updated git clone but old docker image or vice versa. A wrong configured firewall could also cause such a failure. The containers need to be able to talk to each other over the network 172.22.1.1/24. It might also be wrongly linked file (i.e. SSL certificate) that prevents a crucial container (nginx) from starting, so always check your logs to get an Idea where your problem is coming from.","title":"Container XY is unhealthy"},{"location":"debug-common_problems/#address-already-in-use","text":"If you get an error message like: ERROR : for postfix - mailcow Cannot start service postfix - mailcow : driver failed programming external connectivity on endpoint mailcowdockerized_postfix - mailcow_1 : Error starting userland proxy : listen tcp 0 . 0 . 0 . 0 : 25 : bind : address already in use while trying to start / install mailcow: dockerized, make sure you've followed our section on the prerequisites .","title":"Address already in use"},{"location":"debug-common_problems/#xyz-cant-connect-to","text":"Please check your local firewall! Docker and iptables-based firewalls sometimes create conflicting rules, so disable the firewall on your host to determine whether your connection issues are caused by such conflicts. If they are, you need to manually create appropriate rules in your host firewall to permit the necessary connections. If you experience connection problems from home, please check your ISP router's firewall too, some of them block mail traffic on the SMTP (587) or SMTPS (465) ports. It could also be, that your ISP is blocking the ports for SUBMISSION (25). While Linux users can chose from a variety of tools 1 to check if a port is open, the Windows user has only the command telnet host port available by default (and it has to be activated since Windows Vista). To enable telnet on a Windows after Vista please check this guide or enter the following command in an terminal with administrator priviliges : dism / online / Enable - Feature / FeatureName : TelnetClient","title":"XYZ can't connect to ..."},{"location":"debug-common_problems/#inotify-instance-limit-for-user-5000-uid-vmail-exceeded-see-453","text":"Docker containers use the Docker hosts inotify limits. Setting them on your Docker host will pass them to the container. netcat , nmap , openssl , telnet , etc. \u21a9","title":"Inotify instance limit for user 5000 (UID vmail) exceeded (see #453)"},{"location":"debug-logs/","text":"Warning This section only applies for Dockers default logging driver (JSON). To view the logs of all mailcow: dockerized related containers, you can use docker-compose logs inside your mailcow-dockerized folder that contains your mailcow.conf . This is usually a bit much, but you could trim the output with --tail=100 to the last 100 lines per container, or add a -f to follow the live output of all your services. To view the logs of a specific service you can use docker-compose logs [options] $service_name Info The available options for the command docker-compose logs are: --no-color : Produce monochrome output. -f : Follow the log output. -t : Show timestamps. --tail=\"all\" : Number of lines to show from the end of the logs for each container.","title":"Logs"},{"location":"debug-reset_pw/","text":"mailcow Admin Account \u00b6 Reset mailcow admin to admin:moohoo . Older mailcow: dockerized installations may find mailcow-reset-admin.sh in their mailcow root directory (mailcow_path). cd mailcow_path . / helper - scripts / mailcow - reset - admin . sh Reset MySQL Passwords \u00b6 Stop the stack by running docker-compose stop . When the containers came to a stop, run this command: docker - compose run -- rm -- entrypoint ' /bin/sh -c \"gosu mysql mysqld --skip-grant-tables & sleep 10 && mysql -hlocalhost -uroot && exit 0\" ' mysql - mailcow 1. Find database name \u00b6 # source mailcow . conf # docker - compose exec mysql - mailcow mysql - u ${ DBUSER } - p ${ DBPASS } ${ DBNAME } MariaDB [ ( none ) ] > show databases ; +--------------------+ | Database | +--------------------+ | information_schema | | mailcow_database | <===== | mysql | | performance_schema | +--------------------+ 4 rows in set ( 0 . 00 sec ) 2. Reset one or more users \u00b6 Both \"password\" and \"authentication_string\" exist. Currently \"password\" is used, but better set both. MariaDB [( none )] > SELECT user FROM mysql . user ; + --------------+ | user | + --------------+ | mailcow_user | <===== | root | + --------------+ 2 rows in set ( 0 . 00 sec ) MariaDB [( none )] > FLUSH PRIVILEGES ; MariaDB [( none )] > UPDATE mysql . user SET authentication_string = PASSWORD ( 'gotr00t' ), password = PASSWORD ( 'gotr00t' ) WHERE User = 'root' ; MariaDB [( none )] > UPDATE mysql . user SET authentication_string = PASSWORD ( 'mookuh' ), password = PASSWORD ( 'mookuh' ) WHERE User = 'mailcow' AND Host = '%' ; MariaDB [( none )] > FLUSH PRIVILEGES ; Remove Two-Factor Authentication \u00b6 This works similar to resetting a MySQL password, now we do it from the host without connecting to the MySQL CLI: source mailcow . conf docker - compose exec mysql - mailcow mysql - u ${ DBUSER } - p ${ DBPASS } ${ DBNAME } - e \" DELETE FROM tfa WHERE username='YOUR_USERNAME'; \"","title":"Reset Passwords"},{"location":"debug-reset_pw/#mailcow-admin-account","text":"Reset mailcow admin to admin:moohoo . Older mailcow: dockerized installations may find mailcow-reset-admin.sh in their mailcow root directory (mailcow_path). cd mailcow_path . / helper - scripts / mailcow - reset - admin . sh","title":"mailcow Admin Account"},{"location":"debug-reset_pw/#reset-mysql-passwords","text":"Stop the stack by running docker-compose stop . When the containers came to a stop, run this command: docker - compose run -- rm -- entrypoint ' /bin/sh -c \"gosu mysql mysqld --skip-grant-tables & sleep 10 && mysql -hlocalhost -uroot && exit 0\" ' mysql - mailcow","title":"Reset MySQL Passwords"},{"location":"debug-reset_pw/#146-find-database-name","text":"# source mailcow . conf # docker - compose exec mysql - mailcow mysql - u ${ DBUSER } - p ${ DBPASS } ${ DBNAME } MariaDB [ ( none ) ] > show databases ; +--------------------+ | Database | +--------------------+ | information_schema | | mailcow_database | <===== | mysql | | performance_schema | +--------------------+ 4 rows in set ( 0 . 00 sec )","title":"1. Find database name"},{"location":"debug-reset_pw/#246-reset-one-or-more-users","text":"Both \"password\" and \"authentication_string\" exist. Currently \"password\" is used, but better set both. MariaDB [( none )] > SELECT user FROM mysql . user ; + --------------+ | user | + --------------+ | mailcow_user | <===== | root | + --------------+ 2 rows in set ( 0 . 00 sec ) MariaDB [( none )] > FLUSH PRIVILEGES ; MariaDB [( none )] > UPDATE mysql . user SET authentication_string = PASSWORD ( 'gotr00t' ), password = PASSWORD ( 'gotr00t' ) WHERE User = 'root' ; MariaDB [( none )] > UPDATE mysql . user SET authentication_string = PASSWORD ( 'mookuh' ), password = PASSWORD ( 'mookuh' ) WHERE User = 'mailcow' AND Host = '%' ; MariaDB [( none )] > FLUSH PRIVILEGES ;","title":"2. Reset one or more users"},{"location":"debug-reset_pw/#remove-two-factor-authentication","text":"This works similar to resetting a MySQL password, now we do it from the host without connecting to the MySQL CLI: source mailcow . conf docker - compose exec mysql - mailcow mysql - u ${ DBUSER } - p ${ DBPASS } ${ DBNAME } - e \" DELETE FROM tfa WHERE username='YOUR_USERNAME'; \"","title":"Remove Two-Factor Authentication"},{"location":"debug-rm_volumes/","text":"You may want to remove a set of persistent data to resolve a conflict or to start over. mailcowdockerized can vary and depends on your compose project name (if it's unchanged, mailcowdockerized is the correct value). If you are unsure about volume names, run docker volumes ls for a full list. Delete a single volume: docker volume rm mailcowdockerized_ ${ VOLUME_NAME } Remove volume mysql-vol-1 to remove all MySQL data. Remove volume redis-vol-1 to remove all Redis data. Remove volume vmail-vol-1 to remove all contents of /var/vmail mounted to dovecot-mailcow . Remove volume rspamd-vol-1 to remove all Rspamd data. Remove volume crypt-vol-1 to remove all crypto data. This will render all mails unreadable. Alternatively, running docker-compose down -v will destroy all mailcow: dockerized volumes and delete any related containers and networks.","title":"Remove Persistent Data"},{"location":"debug/","text":"When a problem occurs, then always for a reason! What you want to do in such a case is: Read your logs; follow them to see what the reason for your problem is. Follow the leads given to you in your logfiles and start investigating. Restarting the troubled service or the whole stack to see if the problem persists. Read the documentation of the troubled service and search it's bugtracker for your problem. Search our issues for your problem. Create an issue over at our GitHub repository if you think your problem might be a bug or a missing feature you badly need. But please make sure, that you include all the logs and a full description to your problem. Connect to IRC ( chat.freenode.net ) and join our IRC channel #mailcow . Visit the community forum ( mailcow.farm ) and create a thread.","title":"Introduction"},{"location":"firststeps-disable_ipv6/","text":"This is NOT recommended! If IPv6 MUST be disabled to fit a network, open docker-compose.yml , search for enable_ipv6 ... networks : mailcow - network : [...] enable_ipv6 : true [...] ...change it to enable_ipv6: false . mailcow needs to be shutdown, the containers removed and the network recreated: docker - compose down docker - compose up - d","title":"Disable IPv6"},{"location":"firststeps-local_mta/","text":"The easiest option would be to disable the listener on port 25/tcp. Postfix users disable the listener by commenting the following line (starting with smtp or 25 ) in /etc/postfix/master.cf : # smtp inet n - - - - smtpd Furthermore, to relay over a dockerized mailcow, you may want to add 172.22.1.1 as relayhost and remove the Docker interface from \"inet_interfaces\": postconf - e 'relayhost = 172.22.1.1' postconf - e \"mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128\" postconf - e \"inet_interfaces = loopback-only\" postconf - e \"relay_transport = relay\" postconf - e \"default_transport = smtp\" Now it is important to not have the same FQDN in myhostname as you use for your dockerized mailcow. Check your local (non-Docker) Postfix' main.cf for myhostname and set it to something different, for example local.my.fqdn.tld . \"172.22.1.1\" is the mailcow created network gateway in Docker. Relaying over this interface is necessary (instead of - for example - relaying directly over ${MAILCOW_HOSTNAME}) to relay over a known internal network. Restart Postfix after applying your changes.","title":"Local MTA on Docker host"},{"location":"firststeps-logging/","text":"Logging in mailcow: dockerized consists of multiple stages, but is, after all, much more flexible and easier to integrate into a logging daemon than before. In Docker the containerized application (PID 1) writes its output to stdout. For real one-application containers this works just fine. Run docker-compose logs --help to learn more. Some containers log or stream to multiple destinations. No container will keep persistent logs in it. Containers are transient items! In the end, every line of logs will reach the Docker daemon - unfiltered. The default logging driver is \"json\" . Filtered logs \u00b6 Some logs are filtered and written to Redis keys but also streamed to a Redis channel. The Redis channel is used to stream logs with failed authentication attempts to be read by netfilter-mailcow. The Redis keys are persistent and will keep 10000 lines of logs for the web UI. This mechanism makes it possible to use whatever Docker logging driver you want to, without losing the ability to read logs from the UI or ban suspicious clients with netfilter-mailcow. Redis keys will only hold logs from applications and filter out system messages (think of cron etc.). Logging drivers \u00b6 Here is the good news: Since Docker has some great logging drivers, you can integrate mailcow: dockerized into your existing logging environment with ease. Docker logging drivers can now be implemented as plugins, next to Dockers integrated drivers. Logging driver plugins are available in Docker 17.05 and higher. Edit docker-compose.yml and append, for example, this block to use the \"gelf\" logging plugin: logging : driver : \"gelf\" options : gelf - address : \"udp://graylog:12201\" Linux users can also add or edit the Docker daemons configuration file /etc/docker/daemon.json to affect the global logging behavior. Windows users please have a look at the docker documentation : { ... \"log-driver\" : \"gelf\" , \"log-opts\" : { \"gelf-address\" : \"udp://graylog:12201\" } ... } Restart the Docker daemon and run docker-compose down && docker-compose up -d to recreate the containers with the new logging driver.","title":"Logging"},{"location":"firststeps-logging/#filtered-logs","text":"Some logs are filtered and written to Redis keys but also streamed to a Redis channel. The Redis channel is used to stream logs with failed authentication attempts to be read by netfilter-mailcow. The Redis keys are persistent and will keep 10000 lines of logs for the web UI. This mechanism makes it possible to use whatever Docker logging driver you want to, without losing the ability to read logs from the UI or ban suspicious clients with netfilter-mailcow. Redis keys will only hold logs from applications and filter out system messages (think of cron etc.).","title":"Filtered logs"},{"location":"firststeps-logging/#logging-drivers","text":"Here is the good news: Since Docker has some great logging drivers, you can integrate mailcow: dockerized into your existing logging environment with ease. Docker logging drivers can now be implemented as plugins, next to Dockers integrated drivers. Logging driver plugins are available in Docker 17.05 and higher. Edit docker-compose.yml and append, for example, this block to use the \"gelf\" logging plugin: logging : driver : \"gelf\" options : gelf - address : \"udp://graylog:12201\" Linux users can also add or edit the Docker daemons configuration file /etc/docker/daemon.json to affect the global logging behavior. Windows users please have a look at the docker documentation : { ... \"log-driver\" : \"gelf\" , \"log-opts\" : { \"gelf-address\" : \"udp://graylog:12201\" } ... } Restart the Docker daemon and run docker-compose down && docker-compose up -d to recreate the containers with the new logging driver.","title":"Logging drivers"},{"location":"firststeps-relayhost/","text":"As of September 12, 2018 you can setup relayhosts as admin by using the mailcow UI. This is useful if you want to relay outgoing emails for a specific domain to a third-party spam filter or a service like Mailgun or Sendgrid. This is also known as a smarthost . Add a new relayhost \u00b6 Go to the Routing tab of the Configuration and Details section of the admin UI. Here you will see a list of relayhosts currently setup. Scroll to the Add sender-dependent transport section. Under Host , add the host you want to relay to. Example: if you want to use Mailgun to send emails instead of your server IP, enter smtp.mailgun.org If the relay host requires a username and password to authenticate, enter them in the respective fields. Keep in mind the credentials will be stored in plain text. Test a relayhost \u00b6 To test that connectivity to the host works, click on Test from the list of relayhosts and enter a From: address. Then, run the test. You will then see the results of the SMTP transmission. If all went well, you should see SERVER -> CLIENT: 250 2.0.0 Ok: queued as A093B401D4 as one of the last lines. If not, review the error provided and resolve it. Note: Some hosts, especially those who do not require authentication, will deny connections from servers that have not been added to their system beforehand. Make sure you read the documentation of the relayhost to make sure you've added your domain and/or the server IP to their system. Tip: You can change the default test To: address the test uses from null@mailcow.email to any email address you choose by modifying the $RELAY_TO variable on the vars.inc.php file under /opt/mailcow-dockerized/data/web/inc This way you can check that the relay worked by checking the destination mailbox. Set the relayhost for a domain \u00b6 Go to the Domains tab of the Mail setup section of the admin UI. Edit the desired domain. Select the newly added host on the Sender-dependent transports dropdown and save changes. Send an email from a mailbox on that domain and you should see postfix handing the message over to the relayhost in the logs.","title":"Setup a relayhost"},{"location":"firststeps-relayhost/#add-a-new-relayhost","text":"Go to the Routing tab of the Configuration and Details section of the admin UI. Here you will see a list of relayhosts currently setup. Scroll to the Add sender-dependent transport section. Under Host , add the host you want to relay to. Example: if you want to use Mailgun to send emails instead of your server IP, enter smtp.mailgun.org If the relay host requires a username and password to authenticate, enter them in the respective fields. Keep in mind the credentials will be stored in plain text.","title":"Add a new relayhost"},{"location":"firststeps-relayhost/#test-a-relayhost","text":"To test that connectivity to the host works, click on Test from the list of relayhosts and enter a From: address. Then, run the test. You will then see the results of the SMTP transmission. If all went well, you should see SERVER -> CLIENT: 250 2.0.0 Ok: queued as A093B401D4 as one of the last lines. If not, review the error provided and resolve it. Note: Some hosts, especially those who do not require authentication, will deny connections from servers that have not been added to their system beforehand. Make sure you read the documentation of the relayhost to make sure you've added your domain and/or the server IP to their system. Tip: You can change the default test To: address the test uses from null@mailcow.email to any email address you choose by modifying the $RELAY_TO variable on the vars.inc.php file under /opt/mailcow-dockerized/data/web/inc This way you can check that the relay worked by checking the destination mailbox.","title":"Test a relayhost"},{"location":"firststeps-relayhost/#set-the-relayhost-for-a-domain","text":"Go to the Domains tab of the Mail setup section of the admin UI. Edit the desired domain. Select the newly added host on the Sender-dependent transports dropdown and save changes. Send an email from a mailbox on that domain and you should see postfix handing the message over to the relayhost in the logs.","title":"Set the relayhost for a domain"},{"location":"firststeps-rp/","text":"You don't need to change the Nginx site that comes with mailcow: dockerized. mailcow: dockerized trusts the default gateway IP 172.22.1.1 as proxy. 1. Make sure you change HTTP_BIND and HTTPS_BIND in mailcow.conf to a local address and set the ports accordingly, for example: HTTP_BIND = 127 .0.0.1 HTTP_PORT = 8080 HTTPS_BIND = 127 .0.0.1 HTTPS_PORT = 8443 This will also change the bindings inside the Nginx container! This is important, if you decide to use a proxy within Docker. IMPORTANT: Do not use port 8081, 9081 or 65510! Recreate affected containers by running docker-compose up -d . Warning Make sure you run generate_config.sh before you enable any site configuration examples below. The script generate_config.sh copies snake-oil certificates to the correct location, so the services will not fail to start due to missing files. Info Using the site configs below will forward ACME requests to mailcow and let it handle certificates itself. The downside of using mailcow as ACME client behind a reverse proxy is, that you will need to reload your webserver after acme-mailcow changed/renewed/created the certificate. You can either reload your webserver daily or write a script to watch the file for changes. On many servers logrotate will reload the webserver daily anyway. If you want to use a local certbot installation, you will need to change the SSL certificate parameters accordingly. Make sure you run a post-hook script when you decide to use external ACME clients. You will find an example at the bottom of this page. 2. Configure your local webserver as reverse proxy: Apache 2.4 \u00b6 Required modules: a2enmod rewrite proxy proxy_http headers ssl Let's Encrypt will follow our rewrite, certificate requests in mailcow will work fine. Take care of highlighted lines. <VirtualHost *:80 > ServerName CHANGE_TO_MAILCOW_HOSTNAME ServerAlias autodiscover.* ServerAlias autoconfig.* RewriteEngine on RewriteCond %{HTTPS} !=on RewriteRule ^/?(.*) https://%{HTTP_HOST}/$1 [R=301,L] ProxyPass / http://127.0.0.1:8080/ ProxyPassReverse / http://127.0.0.1:8080/ ProxyPreserveHost On ProxyAddHeaders On RequestHeader set X-Forwarded-Proto \"http\" </VirtualHost> <VirtualHost *:443 > ServerName CHANGE_TO_MAILCOW_HOSTNAME ServerAlias autodiscover.* ServerAlias autoconfig.* # You should proxy to a plain HTTP session to offload SSL processing ProxyPass /Microsoft-Server-ActiveSync http://127.0.0.1:8080/Microsoft-Server-ActiveSync connectiontimeout=4000 ProxyPassReverse /Microsoft-Server-ActiveSync http://127.0.0.1:8080/Microsoft-Server-ActiveSync ProxyPass / http://127.0.0.1:8080/ ProxyPassReverse / http://127.0.0.1:8080/ ProxyPreserveHost On ProxyAddHeaders On RequestHeader set X-Forwarded-Proto \"https\" SSLCertificateFile MAILCOW_PATH/data/assets/ssl/cert.pem SSLCertificateKeyFile MAILCOW_PATH/data/assets/ssl/key.pem # If you plan to proxy to a HTTPS host: #SSLProxyEngine On # If you plan to proxy to an untrusted HTTPS host: #SSLProxyVerify none #SSLProxyCheckPeerCN off #SSLProxyCheckPeerName off #SSLProxyCheckPeerExpire off </VirtualHost> Nginx \u00b6 Let's Encrypt will follow our rewrite, certificate requests will work fine. Take care of highlighted lines. server { listen 80 default_server ; listen [::]: 80 default_server ; server_name CHANGE_TO_MAILCOW_HOSTNAME autodiscover . * autoconfig . * ; return 301 https : // $ host $ request_uri ; } server { listen 443 ; listen [::]: 443 ; server_name CHANGE_TO_MAILCOW_HOSTNAME autodiscover . * autoconfig . * ; ssl on ; ssl_certificate MAILCOW_PATH / data / assets / ssl / cert . pem ; ssl_certificate_key MAILCOW_PATH / data / assets / ssl / key . pem ; ssl_protocols TLSv1 TLSv1 . 1 TLSv1 . 2 ; ssl_ciphers HIGH : ! aNULL : ! MD5 ; location / Microsoft - Server - ActiveSync { proxy_pass http : // 127 . 0 . 0 . 1 : 8080 / Microsoft - Server - ActiveSync ; proxy_set_header Host $ http_host ; proxy_set_header X - Real - IP $ remote_addr ; proxy_set_header X - Forwarded - For $ proxy_add_x_forwarded_for ; proxy_set_header X - Forwarded - Proto $ scheme ; proxy_connect_timeout 75 ; proxy_send_timeout 3650 ; proxy_read_timeout 3650 ; proxy_buffers 64 256 k ; client_body_buffer_size 512 k ; client_max_body_size 0 ; } location / { proxy_pass http : // 127 . 0 . 0 . 1 : 8080 / ; proxy_set_header Host $ http_host ; proxy_set_header X - Real - IP $ remote_addr ; proxy_set_header X - Forwarded - For $ proxy_add_x_forwarded_for ; proxy_set_header X - Forwarded - Proto $ scheme ; client_max_body_size 0 ; } } HAProxy \u00b6 Important/Fixme : This example only forwards HTTPS traffic and does not use mailcows built-in ACME client. frontend https - in bind ::: 443 v4v6 ssl crt mailcow . pem default_backend mailcow backend mailcow option forwardfor http - request set - header X - Forwarded - Proto https if { ssl_fc } http - request set - header X - Forwarded - Proto http if ! { ssl_fc } server mailcow 127 . 0 . 0 . 1 : 8080 check Optional: Post-hook script for non-mailcow ACME clients \u00b6 Using a local certbot (or any other ACME client) requires to restart some containers, you can do this with a post-hook script. Make sure you change the pathes accordingly: #!/bin/bash cp /etc/letsencrypt/live/my.domain.tld/fullchain.pem /opt/mailcow-dockerized/data/assets/ssl/cert.pem cp /etc/letsencrypt/live/my.domain.tld/privkey.pem /opt/mailcow-dockerized/data/assets/ssl/key.pem # Either restart... #postfix_c=$(docker ps -qaf name=postfix-mailcow) #dovecot_c=$(docker ps -qaf name=dovecot-mailcow) #nginx_c=$(docker ps -qaf name=nginx-mailcow) #docker restart ${postfix_c} ${dovecot_c} ${nginx_c} # ...or reload: docker exec $( docker ps -qaf name = postfix-mailcow ) postfix reload docker exec $( docker ps -qaf name = nginx-mailcow ) nginx -s reload docker exec $( docker ps -qaf name = dovecot-mailcow ) dovecot reload","title":"Reverse Proxy"},{"location":"firststeps-rp/#apache-24","text":"Required modules: a2enmod rewrite proxy proxy_http headers ssl Let's Encrypt will follow our rewrite, certificate requests in mailcow will work fine. Take care of highlighted lines. <VirtualHost *:80 > ServerName CHANGE_TO_MAILCOW_HOSTNAME ServerAlias autodiscover.* ServerAlias autoconfig.* RewriteEngine on RewriteCond %{HTTPS} !=on RewriteRule ^/?(.*) https://%{HTTP_HOST}/$1 [R=301,L] ProxyPass / http://127.0.0.1:8080/ ProxyPassReverse / http://127.0.0.1:8080/ ProxyPreserveHost On ProxyAddHeaders On RequestHeader set X-Forwarded-Proto \"http\" </VirtualHost> <VirtualHost *:443 > ServerName CHANGE_TO_MAILCOW_HOSTNAME ServerAlias autodiscover.* ServerAlias autoconfig.* # You should proxy to a plain HTTP session to offload SSL processing ProxyPass /Microsoft-Server-ActiveSync http://127.0.0.1:8080/Microsoft-Server-ActiveSync connectiontimeout=4000 ProxyPassReverse /Microsoft-Server-ActiveSync http://127.0.0.1:8080/Microsoft-Server-ActiveSync ProxyPass / http://127.0.0.1:8080/ ProxyPassReverse / http://127.0.0.1:8080/ ProxyPreserveHost On ProxyAddHeaders On RequestHeader set X-Forwarded-Proto \"https\" SSLCertificateFile MAILCOW_PATH/data/assets/ssl/cert.pem SSLCertificateKeyFile MAILCOW_PATH/data/assets/ssl/key.pem # If you plan to proxy to a HTTPS host: #SSLProxyEngine On # If you plan to proxy to an untrusted HTTPS host: #SSLProxyVerify none #SSLProxyCheckPeerCN off #SSLProxyCheckPeerName off #SSLProxyCheckPeerExpire off </VirtualHost>","title":"Apache 2.4"},{"location":"firststeps-rp/#nginx","text":"Let's Encrypt will follow our rewrite, certificate requests will work fine. Take care of highlighted lines. server { listen 80 default_server ; listen [::]: 80 default_server ; server_name CHANGE_TO_MAILCOW_HOSTNAME autodiscover . * autoconfig . * ; return 301 https : // $ host $ request_uri ; } server { listen 443 ; listen [::]: 443 ; server_name CHANGE_TO_MAILCOW_HOSTNAME autodiscover . * autoconfig . * ; ssl on ; ssl_certificate MAILCOW_PATH / data / assets / ssl / cert . pem ; ssl_certificate_key MAILCOW_PATH / data / assets / ssl / key . pem ; ssl_protocols TLSv1 TLSv1 . 1 TLSv1 . 2 ; ssl_ciphers HIGH : ! aNULL : ! MD5 ; location / Microsoft - Server - ActiveSync { proxy_pass http : // 127 . 0 . 0 . 1 : 8080 / Microsoft - Server - ActiveSync ; proxy_set_header Host $ http_host ; proxy_set_header X - Real - IP $ remote_addr ; proxy_set_header X - Forwarded - For $ proxy_add_x_forwarded_for ; proxy_set_header X - Forwarded - Proto $ scheme ; proxy_connect_timeout 75 ; proxy_send_timeout 3650 ; proxy_read_timeout 3650 ; proxy_buffers 64 256 k ; client_body_buffer_size 512 k ; client_max_body_size 0 ; } location / { proxy_pass http : // 127 . 0 . 0 . 1 : 8080 / ; proxy_set_header Host $ http_host ; proxy_set_header X - Real - IP $ remote_addr ; proxy_set_header X - Forwarded - For $ proxy_add_x_forwarded_for ; proxy_set_header X - Forwarded - Proto $ scheme ; client_max_body_size 0 ; } }","title":"Nginx"},{"location":"firststeps-rp/#haproxy","text":"Important/Fixme : This example only forwards HTTPS traffic and does not use mailcows built-in ACME client. frontend https - in bind ::: 443 v4v6 ssl crt mailcow . pem default_backend mailcow backend mailcow option forwardfor http - request set - header X - Forwarded - Proto https if { ssl_fc } http - request set - header X - Forwarded - Proto http if ! { ssl_fc } server mailcow 127 . 0 . 0 . 1 : 8080 check","title":"HAProxy"},{"location":"firststeps-rp/#optional-post-hook-script-for-non-mailcow-acme-clients","text":"Using a local certbot (or any other ACME client) requires to restart some containers, you can do this with a post-hook script. Make sure you change the pathes accordingly: #!/bin/bash cp /etc/letsencrypt/live/my.domain.tld/fullchain.pem /opt/mailcow-dockerized/data/assets/ssl/cert.pem cp /etc/letsencrypt/live/my.domain.tld/privkey.pem /opt/mailcow-dockerized/data/assets/ssl/key.pem # Either restart... #postfix_c=$(docker ps -qaf name=postfix-mailcow) #dovecot_c=$(docker ps -qaf name=dovecot-mailcow) #nginx_c=$(docker ps -qaf name=nginx-mailcow) #docker restart ${postfix_c} ${dovecot_c} ${nginx_c} # ...or reload: docker exec $( docker ps -qaf name = postfix-mailcow ) postfix reload docker exec $( docker ps -qaf name = nginx-mailcow ) nginx -s reload docker exec $( docker ps -qaf name = dovecot-mailcow ) dovecot reload","title":"Optional: Post-hook script for non-mailcow ACME clients"},{"location":"firststeps-rspamd_ui/","text":"Rspamd ( https://rspamd.com/webui/ ) is an easy to use spam filtering tool presently installed with mailcow. Go to the mailcow web admin interface Navigate to the Access tab. (Configuration > Administration > Access) Modify the Rspamd UI password Go to https://${MAILCOW_HOSTNAME}/rspamd in a browser and log in! Additional configuration options and documentation can be found here : https://rspamd.com/webui/","title":"Rspamd Web UI"},{"location":"firststeps-snat/","text":"SNAT \u00b6 SNAT is used to change the source address of the packets sent by mailcow. It can be used to change the outgoing IP on systems with multiple IP addresses. Open mailcow.conf , set either or both of the following parameters: # Use this IPv4 for outgoing connections ( SNAT ) SNAT_TO_SOURCE = 1 . 2 . 3 . 4 # Use this IPv6 for outgoing connections ( SNAT ) SNAT6_TO_SOURCE = dead : beef Run docker-compose up -d . The values are read by netfilter-mailcow. netfilter-mailcow will make sure, the post-routing rules are on position 1 in the netfilter table. It does automatically delete and re-create them if they are found on another position than 1. Check the output of docker-compose logs --tail=200 netfilter-mailcow to ensure the SNAT settings have been applied.","title":"SNAT"},{"location":"firststeps-snat/#snat","text":"SNAT is used to change the source address of the packets sent by mailcow. It can be used to change the outgoing IP on systems with multiple IP addresses. Open mailcow.conf , set either or both of the following parameters: # Use this IPv4 for outgoing connections ( SNAT ) SNAT_TO_SOURCE = 1 . 2 . 3 . 4 # Use this IPv6 for outgoing connections ( SNAT ) SNAT6_TO_SOURCE = dead : beef Run docker-compose up -d . The values are read by netfilter-mailcow. netfilter-mailcow will make sure, the post-routing rules are on position 1 in the netfilter table. It does automatically delete and re-create them if they are found on another position than 1. Check the output of docker-compose logs --tail=200 netfilter-mailcow to ensure the SNAT settings have been applied.","title":"SNAT"},{"location":"firststeps-ssl/","text":"Let's Encrypt (out-of-the-box) \u00b6 The \"acme-mailcow\" container will try to obtain a LE certificate for ${MAILCOW_HOSTNAME} , autodiscover.ADDED_MAIL_DOMAIN and autoconfig.ADDED_MAIL_DOMAIN . Warning mailcow must be available on port 80 for the acme-client to work. Our reverse proxy example configurations do cover that. You can also use any external ACME client (certbot for example) to obtain certificates, but you will need to make sure, that they are copied to the correct location and a post-hook reloads affected containers. See more in the Reverse Proxy documentation. By default, which means 0 domains are added to mailcow, it will try to obtain a certificate for ${MAILCOW_HOSTNAME} . For each domain you add, it will try to resolve autodiscover.ADDED_MAIL_DOMAIN and autoconfig.ADDED_MAIL_DOMAIN to its IPv6 or - if IPv6 is not configured in your domain - IPv4 address. If it succeeds, a name will be added as SAN to the certificate request. Only names that can be validated, will be added as SAN. For every domain you remove, the certificate will be moved and a new certificate will be requested. It is not possible to keep domains in a certificate, when we are not able validate the challenge for those. If you want to re-run the ACME client, use docker-compose restart acme-mailcow and monitor its logs with docker-compose logs --tail=200 -f acme-mailcow . Additional domain names \u00b6 Edit \"mailcow.conf\" and add a parameter ADDITIONAL_SAN like this: Do not use quotes ( \" )! ADDITIONAL_SAN = smtp . * , cert1 . example . com , cert2 . example . org , whatever . * Each name will be validated against its IPv6 or - if IPv6 is not configured in your domain - IPv4 address. A wildcard name like smtp.* will try to obtain a smtp.DOMAIN_NAME SAN for each domain added to mailcow. Run docker-compose up -d to recreate affected containers automatically. Validation errors and how to skip validation \u00b6 You can skip the IP verification by setting SKIP_IP_CHECK=y in mailcow.conf (no quotes). Be warned that a misconfiguration will get you ratelimited by Let's Encrypt! This is primarily useful for multi-IP setups where the IP check would return the incorrect source IP. Due to using dynamic IPs for acme-mailcow, source NAT is not consistent over restarts. If you encounter problems with \"HTTP validation\", but your IP confirmation succeeds, you are most likely using firewalld, ufw or any other firewall, that disallows connections from br-mailcow to your external interface. Both firewalld and ufw disallow this by default. It is often not enough to just stop these firewall services. You'd need to stop mailcow ( docker-compose down ), stop the firewall service, flush the chains and restart Docker. You can also skip this validation method by setting SKIP_HTTP_VERIFICATION=y in \"mailcow.conf\". Be warned that this is discouraged. Some DNS validations (like TLSA lookups) in mailcow UI will fail. If you changed a SKIP_* parameter, run docker-compose up -d to apply your changes. Disable Let's Encrypt \u00b6 Disable Let's Encrypt completely \u00b6 Set SKIP_LETS_ENCRYPT=y in \"mailcow.conf\" and recreate \"acme-mailcow\" by running docker-compose up -d . Skip all names but ${MAILCOW_HOSTNAME} \u00b6 Add ONLY_MAILCOW_HOSTNAME=y to \"mailcow.conf\" and recreate \"acme-mailcow\" by running docker-compose up -d . The Let's Encrypt subjectAltName limit of 100 domains \u00b6 Let's Encrypt currently has a limit of 100 Domain Names per Certificate . By default, \"acme-mailcow\" will create a single SAN certificate for all validated domains (see the first section and Additional domain names ). This provides best compatibility but means the Let's Encrypt limit exceeds if you add too many domains to a single mailcow installation. To solve this, you can configure ENABLE_SSL_SNI to generate: * A main server certificate with MAILCOW_HOSTNAME and all fully qualified domain names in the ADDITIONAL_SAN config * One additional certificate for each domain found in the database with autodiscover. , autoconfig. and any other ADDITIONAL_SAN configured in this format (subdomain.*) Postfix, Dovecot and Nginx will then serve these certificates with SNI. Set ENABLE_SSL_SNI=y in \"mailcow.conf\" and recreate \"acme-mailcow\" by running docker-compose up -d . Warning Not all clients support SNI, see Dovecot documentation or Wikipedia . You should make sure these clients use the MAILCOW_HOSTNAME for secure connections if you enable this feature. Here is an example: * MAILCOW_HOSTNAME=server.email.tld * ADDITIONAL_SAN=webmail.email.tld,mail.* * Mailcow email domains: \"domain1.tld\" and \"domain2.tld\" The following certificates will be generated: * server.email.tld, webmail.email.tld -> this is the default certificate, all clients can connect with these domains * mail.domain1.tld, autoconfig.domain1.tld, autodiscover.domain1.tld -> individual certificate for domain1.tld, cannot be used by clients without SNI support * mail.domain2.tld, autoconfig.domain2.tld, autodiscover.domain2.tld -> individual certificate for domain2.tld, cannot be used by clients without SNI support How to use your own certificate \u00b6 Make sure you disable mailcows internal LE client (see above). To use your own certificates, just save the combined certificate (containing the certificate and intermediate CA/CA if any) to data/assets/ssl/cert.pem and the corresponding key to data/assets/ssl/key.pem . Reload affected service: docker exec $ ( docker ps - qaf name = postfix - mailcow ) postfix reload docker exec $ ( docker ps - qaf name = nginx - mailcow ) nginx - s reload docker exec $ ( docker ps - qaf name = dovecot - mailcow ) dovecot reload Check your configuration \u00b6 Run docker-compose logs acme-mailcow to find out why a validation fails. To check if nginx serves the correct certificate, simply use a browser of your choice and check the displayed certificate. To check the certificate served by Postfix, Dovecot and Nginx we will use openssl : # Connect via SMTP ( 587 ) echo \" Q \" | openssl s_client - starttls smtp - crlf - connect mx . mailcow . email : 587 # Connect via IMAP ( 143 ) echo \" Q \" | openssl s_client - starttls imap - showcerts - connect mx . mailcow . email : 143 # Connect via HTTPS ( 443 ) echo \" Q \" | openssl s_client - connect mx . mailcow . email : 443","title":"SSL"},{"location":"firststeps-ssl/#lets-encrypt-out-of-the-box","text":"The \"acme-mailcow\" container will try to obtain a LE certificate for ${MAILCOW_HOSTNAME} , autodiscover.ADDED_MAIL_DOMAIN and autoconfig.ADDED_MAIL_DOMAIN . Warning mailcow must be available on port 80 for the acme-client to work. Our reverse proxy example configurations do cover that. You can also use any external ACME client (certbot for example) to obtain certificates, but you will need to make sure, that they are copied to the correct location and a post-hook reloads affected containers. See more in the Reverse Proxy documentation. By default, which means 0 domains are added to mailcow, it will try to obtain a certificate for ${MAILCOW_HOSTNAME} . For each domain you add, it will try to resolve autodiscover.ADDED_MAIL_DOMAIN and autoconfig.ADDED_MAIL_DOMAIN to its IPv6 or - if IPv6 is not configured in your domain - IPv4 address. If it succeeds, a name will be added as SAN to the certificate request. Only names that can be validated, will be added as SAN. For every domain you remove, the certificate will be moved and a new certificate will be requested. It is not possible to keep domains in a certificate, when we are not able validate the challenge for those. If you want to re-run the ACME client, use docker-compose restart acme-mailcow and monitor its logs with docker-compose logs --tail=200 -f acme-mailcow .","title":"Let's Encrypt (out-of-the-box)"},{"location":"firststeps-ssl/#additional-domain-names","text":"Edit \"mailcow.conf\" and add a parameter ADDITIONAL_SAN like this: Do not use quotes ( \" )! ADDITIONAL_SAN = smtp . * , cert1 . example . com , cert2 . example . org , whatever . * Each name will be validated against its IPv6 or - if IPv6 is not configured in your domain - IPv4 address. A wildcard name like smtp.* will try to obtain a smtp.DOMAIN_NAME SAN for each domain added to mailcow. Run docker-compose up -d to recreate affected containers automatically.","title":"Additional domain names"},{"location":"firststeps-ssl/#validation-errors-and-how-to-skip-validation","text":"You can skip the IP verification by setting SKIP_IP_CHECK=y in mailcow.conf (no quotes). Be warned that a misconfiguration will get you ratelimited by Let's Encrypt! This is primarily useful for multi-IP setups where the IP check would return the incorrect source IP. Due to using dynamic IPs for acme-mailcow, source NAT is not consistent over restarts. If you encounter problems with \"HTTP validation\", but your IP confirmation succeeds, you are most likely using firewalld, ufw or any other firewall, that disallows connections from br-mailcow to your external interface. Both firewalld and ufw disallow this by default. It is often not enough to just stop these firewall services. You'd need to stop mailcow ( docker-compose down ), stop the firewall service, flush the chains and restart Docker. You can also skip this validation method by setting SKIP_HTTP_VERIFICATION=y in \"mailcow.conf\". Be warned that this is discouraged. Some DNS validations (like TLSA lookups) in mailcow UI will fail. If you changed a SKIP_* parameter, run docker-compose up -d to apply your changes.","title":"Validation errors and how to skip validation"},{"location":"firststeps-ssl/#disable-lets-encrypt","text":"","title":"Disable Let's Encrypt"},{"location":"firststeps-ssl/#disable-lets-encrypt-completely","text":"Set SKIP_LETS_ENCRYPT=y in \"mailcow.conf\" and recreate \"acme-mailcow\" by running docker-compose up -d .","title":"Disable Let's Encrypt completely"},{"location":"firststeps-ssl/#skip-all-names-but-mailcow_hostname","text":"Add ONLY_MAILCOW_HOSTNAME=y to \"mailcow.conf\" and recreate \"acme-mailcow\" by running docker-compose up -d .","title":"Skip all names but ${MAILCOW_HOSTNAME}"},{"location":"firststeps-ssl/#the-lets-encrypt-subjectaltname-limit-of-100-domains","text":"Let's Encrypt currently has a limit of 100 Domain Names per Certificate . By default, \"acme-mailcow\" will create a single SAN certificate for all validated domains (see the first section and Additional domain names ). This provides best compatibility but means the Let's Encrypt limit exceeds if you add too many domains to a single mailcow installation. To solve this, you can configure ENABLE_SSL_SNI to generate: * A main server certificate with MAILCOW_HOSTNAME and all fully qualified domain names in the ADDITIONAL_SAN config * One additional certificate for each domain found in the database with autodiscover. , autoconfig. and any other ADDITIONAL_SAN configured in this format (subdomain.*) Postfix, Dovecot and Nginx will then serve these certificates with SNI. Set ENABLE_SSL_SNI=y in \"mailcow.conf\" and recreate \"acme-mailcow\" by running docker-compose up -d . Warning Not all clients support SNI, see Dovecot documentation or Wikipedia . You should make sure these clients use the MAILCOW_HOSTNAME for secure connections if you enable this feature. Here is an example: * MAILCOW_HOSTNAME=server.email.tld * ADDITIONAL_SAN=webmail.email.tld,mail.* * Mailcow email domains: \"domain1.tld\" and \"domain2.tld\" The following certificates will be generated: * server.email.tld, webmail.email.tld -> this is the default certificate, all clients can connect with these domains * mail.domain1.tld, autoconfig.domain1.tld, autodiscover.domain1.tld -> individual certificate for domain1.tld, cannot be used by clients without SNI support * mail.domain2.tld, autoconfig.domain2.tld, autodiscover.domain2.tld -> individual certificate for domain2.tld, cannot be used by clients without SNI support","title":"The Let's Encrypt subjectAltName limit of 100 domains"},{"location":"firststeps-ssl/#how-to-use-your-own-certificate","text":"Make sure you disable mailcows internal LE client (see above). To use your own certificates, just save the combined certificate (containing the certificate and intermediate CA/CA if any) to data/assets/ssl/cert.pem and the corresponding key to data/assets/ssl/key.pem . Reload affected service: docker exec $ ( docker ps - qaf name = postfix - mailcow ) postfix reload docker exec $ ( docker ps - qaf name = nginx - mailcow ) nginx - s reload docker exec $ ( docker ps - qaf name = dovecot - mailcow ) dovecot reload","title":"How to use your own certificate"},{"location":"firststeps-ssl/#check-your-configuration","text":"Run docker-compose logs acme-mailcow to find out why a validation fails. To check if nginx serves the correct certificate, simply use a browser of your choice and check the displayed certificate. To check the certificate served by Postfix, Dovecot and Nginx we will use openssl : # Connect via SMTP ( 587 ) echo \" Q \" | openssl s_client - starttls smtp - crlf - connect mx . mailcow . email : 587 # Connect via IMAP ( 143 ) echo \" Q \" | openssl s_client - starttls imap - showcerts - connect mx . mailcow . email : 143 # Connect via HTTPS ( 443 ) echo \" Q \" | openssl s_client - connect mx . mailcow . email : 443","title":"Check your configuration"},{"location":"firststeps-sync_jobs_migration/","text":"Sync jobs are used to copy or move existing emails from an external IMAP server or within mailcow's existing mailboxes. Info Depending on your mailbox's ACL you may not have the option to add a sync job. Please contact your domain administrator if so. Setup a Sync Job \u00b6 In the \"Mail Setup\" or \"User Settings\" interface, create a new sync job. If you are an administrator, select the username of the downstream mailcow mailbox in the \"Username\" dropdown. Fill in the \"Host\" and \"Port\" fields with their respective correct values from the upstream IMAP server. In the \"Username\" and 'Password\" fields, supply the correct access credentials from the upstream IMAP server. Select the \"Encryption Method\". If the upstream IMAP server uses port 143, it is likely that the encryption method is TLS and SSL for port 993. Nevertheless, you can use PLAIN authentication, but it is stongly discouraged. For all ther other fields, you can leave them as is or modify them as desired. Make sure to tick \"Active\" and click \"Add\". Info Once Completed, log into the mailbox and check if all emails are imported correctly. If all goes well, All your mails shall end up in your new mailbox. And don't forget to delete or deactivate the sync job after it is used.","title":"Sync Jobs Migration"},{"location":"firststeps-sync_jobs_migration/#setup-a-sync-job","text":"In the \"Mail Setup\" or \"User Settings\" interface, create a new sync job. If you are an administrator, select the username of the downstream mailcow mailbox in the \"Username\" dropdown. Fill in the \"Host\" and \"Port\" fields with their respective correct values from the upstream IMAP server. In the \"Username\" and 'Password\" fields, supply the correct access credentials from the upstream IMAP server. Select the \"Encryption Method\". If the upstream IMAP server uses port 143, it is likely that the encryption method is TLS and SSL for port 993. Nevertheless, you can use PLAIN authentication, but it is stongly discouraged. For all ther other fields, you can leave them as is or modify them as desired. Make sure to tick \"Active\" and click \"Add\". Info Once Completed, log into the mailbox and check if all emails are imported correctly. If all goes well, All your mails shall end up in your new mailbox. And don't forget to delete or deactivate the sync job after it is used.","title":"Setup a Sync Job"},{"location":"i_u_m_install/","text":"Warning Make sure you've read \"Prepare Your System\" before proceeding! You need Docker and Docker Compose. 1. Learn how to install Docker and Docker Compose . Quick installation for most operation systems: Docker curl - sSL https : // get . docker . com / | CHANNEL = stable sh # After the installation process is finished , you may need to enable the service and make sure it is started ( e . g . CentOS 7 ) systemctl enable docker . service systemctl start docker . service Docker-Compose curl - L https : // github . com / docker / compose / releases / download / $ ( curl - Ls https : // www . servercow . de / docker - compose / latest . php ) / docker - compose - $ ( uname - s ) - $ ( uname - m ) > / usr / local / bin / docker - compose chmod + x / usr / local / bin / docker - compose Please use the latest Docker engine available and do not use the engine that ships with your distros repository. 2. Clone the master branch of the repository, make sure your umask equals 0022. umask # 0022 cd / opt git clone https : // github . com / mailcow / mailcow - dockerized cd mailcow - dockerized 3. Generate a configuration file. Use a FQDN ( host.domain.tld ) as hostname when asked. . / generate_config . sh 4. Change configuration if you want or need to. nano mailcow . conf If you plan to use a reverse proxy, you can, for example, bind HTTPS to 127.0.0.1 on port 8443 and HTTP to 127.0.0.1 on port 8080. You may need to stop an existing pre-installed MTA which blocks port 25/tcp. See this chapter to learn how to reconfigure Postfix to run besides mailcow after a successful installation. Some updates modify mailcow.conf and add new parameters. It is hard to keep track of them in the documentation. Please check their description and, if unsure, ask at the known channels for advise. 4.1. Users with a MTU not equal to 1500 (e.g. OpenStack): Whenever you run into trouble and strange phenomena, please check your MTU. Edit docker-compose.yml and change the network settings according to your MTU. Add the new driver_opts parameter like this: networks : mailcow - network : ... driver_opts : com . docker . network . driver . mtu : 1450 ... 5. Pull the images and run the composer file. The parameter -d will start mailcow: dockerized detached: docker - compose pull docker - compose up - d Done! You can now access https://${MAILCOW_HOSTNAME} with the default credentials admin + password moohoo . The database will be initialized right after a connection to MySQL can be established. Your data will persist in multiple Docker volumes, that are not deleted when you recreate or delete containers. Run docker volume ls to see a list of all volumes. You can safely run docker-compose down without removing persistent data.","title":"Installation"},{"location":"i_u_m_migration/","text":"Please note: This guide assumes you intend to migrate an existing mailcow server (source) over to a brand new, empty server (target). It takes no care about preserving any existing data on your target server and will erase anything within /var/lib/docker/volumes and thus any Docker volumes you may have already set up. \u00b6 Alternatively, you can use the ./helper-scripts/backup_and_restore.sh script to create a full backup on the source machine, then install mailcow on the target machine as usual, copy over your mailcow.conf and use the same script to restore your backup to the target machine. \u00b6 1. Install Docker and Docker Compose on your new server. Quick installation for most operation systems: Docker curl - sSL https : // get . docker . com / | CHANNEL = stable sh # After the installation process is finished , you may need to enable the service and make sure it is started ( e . g . CentOS 7 ) systemctl enable docker . service docker-compose curl - L https : // github . com / docker / compose / releases / download / $ ( curl - Ls https : // www . servercow . de / docker - compose / latest . php ) / docker - compose - $ ( uname - s ) - $ ( uname - m ) > / usr / local / bin / docker - compose chmod + x / usr / local / bin / docker - compose Please use the latest Docker engine available and do not use the engine that ships with your distros repository. 2. Make sure that Docker is stopped: systemctl status docker . service 3. Run the following commands on the source machine (take care of adding the trailing slashes in the first path parameter as shown below!) - WARNING: This command will erase anything that may already exist under /var/lib/docker/volumes on the target machine : rsync - aHhP --numeric-ids --delete /opt/mailcow-dockerized/ root@target-machine.example.com:/opt/mailcow-dockerized rsync - aHhP --numeric-ids --delete /var/lib/docker/volumes/ root@target-machine.example.com:/var/lib/docker/volumes 4. Shut down mailcow and stop Docker on the source machine. cd / opt / mailcow - dockerized docker - compose down systemctl stop docker . service 5. Repeat step 3 with the same commands. This will be much quicker than the first time. 6. Switch over to the target machine and start Docker. systemctl start docker . service 7. Now pull the mailcow Docker images on the target machine. cd / opt / mailcow - dockerized docker - compose pull 8. Start the whole mailcow stack and everything should be done! docker - compose up - d 9. Finally, change your DNS settings to point to the target server.","title":"Migration"},{"location":"i_u_m_migration/#please-note-this-guide-assumes-you-intend-to-migrate-an-existing-mailcow-server-source-over-to-a-brand-new-empty-server-target-it-takes-no-care-about-preserving-any-existing-data-on-your-target-server-and-will-erase-anything-within-varlibdockervolumes-and-thus-any-docker-volumes-you-may-have-already-set-up","text":"","title":"Please note: This guide assumes you intend to migrate an existing mailcow server (source) over to a brand new, empty server (target). It takes no care about preserving any existing data on your target server and will erase anything within /var/lib/docker/volumes and thus any Docker volumes you may have already set up."},{"location":"i_u_m_migration/#alternatively-you-can-use-the-helper-scriptsbackup_and_restoresh-script-to-create-a-full-backup-on-the-source-machine-then-install-mailcow-on-the-target-machine-as-usual-copy-over-your-mailcowconf-and-use-the-same-script-to-restore-your-backup-to-the-target-machine","text":"1. Install Docker and Docker Compose on your new server. Quick installation for most operation systems: Docker curl - sSL https : // get . docker . com / | CHANNEL = stable sh # After the installation process is finished , you may need to enable the service and make sure it is started ( e . g . CentOS 7 ) systemctl enable docker . service docker-compose curl - L https : // github . com / docker / compose / releases / download / $ ( curl - Ls https : // www . servercow . de / docker - compose / latest . php ) / docker - compose - $ ( uname - s ) - $ ( uname - m ) > / usr / local / bin / docker - compose chmod + x / usr / local / bin / docker - compose Please use the latest Docker engine available and do not use the engine that ships with your distros repository. 2. Make sure that Docker is stopped: systemctl status docker . service 3. Run the following commands on the source machine (take care of adding the trailing slashes in the first path parameter as shown below!) - WARNING: This command will erase anything that may already exist under /var/lib/docker/volumes on the target machine : rsync - aHhP --numeric-ids --delete /opt/mailcow-dockerized/ root@target-machine.example.com:/opt/mailcow-dockerized rsync - aHhP --numeric-ids --delete /var/lib/docker/volumes/ root@target-machine.example.com:/var/lib/docker/volumes 4. Shut down mailcow and stop Docker on the source machine. cd / opt / mailcow - dockerized docker - compose down systemctl stop docker . service 5. Repeat step 3 with the same commands. This will be much quicker than the first time. 6. Switch over to the target machine and start Docker. systemctl start docker . service 7. Now pull the mailcow Docker images on the target machine. cd / opt / mailcow - dockerized docker - compose pull 8. Start the whole mailcow stack and everything should be done! docker - compose up - d 9. Finally, change your DNS settings to point to the target server.","title":"Alternatively, you can use the ./helper-scripts/backup_and_restore.sh script to create a full backup on the source machine, then install mailcow on the target machine as usual, copy over your mailcow.conf and use the same script to restore your backup to the target machine."},{"location":"i_u_m_update/","text":"Automatic update \u00b6 An update script in your mailcow-dockerized directory will take care of updates. But use it with caution! If you think you made a lot of changes to the mailcow code, you should use the manual update guide below. Run the update script: . / update . sh If it needs to, it will ask you how you wish to proceed. Merge errors will be reported. Some minor conflicts will be auto-corrected (in favour for the mailcow: dockerized repository code). Options \u00b6 # Check for updates . / update . sh -- check # Update with merge strategy \" ours \" instead of \" theirs \" # This will merge in favor for your local changes . . / update . sh -- ours # Don ' t update, but prefetch images and exit . / update . sh -- prefetch Manual update \u00b6 Step 1 \u00b6 You may want to backup your certificates, as an upgrade from an older mailcow: dockerized version may remove these files: cp - rp data / assets / ssl / tmp / ssl_backup_mailcow Fetch new data from GitHub, commit changes and merge remote repository: # 1 . Get updates / changes git fetch origin master # 2 . Add all changed files to local clone git add - A # 3 . Commit changes , ignore git complaining about username and mail address git commit - m \" Local config at $(date) \" # 4 . Merge changes , prefer mailcow repository , replace \" theirs \" by \" ours \" to change merge strategy git merge - Xtheirs - Xpatience # If it conflicts with files that were deleted from the mailcow repository , just run ... git status -- porcelain | grep - E \" UD|DU \" | awk ' {print $2} ' | xargs rm - v # ... and repeat step 2 and 3 Check data/assets/ssl for your certificates (and dhparams.pem). If you miss them, recover your files: cp - rp / tmp / ssl_backup_mailcow /* data/assets/ssl/ Step 2 \u00b6 When upgrading from a version older than May 13th, 2017 to a version released after that date, you need to run the following command first as network settings have been changed: docker - compose down Pull new images (if any) and recreate changed containers: docker - compose pull docker - compose up - d --remove-orphans Step 3 \u00b6 Clean-up dangling (unused) images and volumes: It is very important to not run these commands when your containers are deleted. Running docker-compose down - for example - will delete your containers. Your volumes are now in a dangling state! Running the commands shown below, will remove your volumes and therefore your data. docker rmi - f $ ( docker images - f \"dangling=true\" - q ) docker volume rm $ ( docker volume ls - qf dangling = true ) Footnotes \u00b6 There is no release cycle regarding updates.","title":"Update"},{"location":"i_u_m_update/#automatic-update","text":"An update script in your mailcow-dockerized directory will take care of updates. But use it with caution! If you think you made a lot of changes to the mailcow code, you should use the manual update guide below. Run the update script: . / update . sh If it needs to, it will ask you how you wish to proceed. Merge errors will be reported. Some minor conflicts will be auto-corrected (in favour for the mailcow: dockerized repository code).","title":"Automatic update"},{"location":"i_u_m_update/#options","text":"# Check for updates . / update . sh -- check # Update with merge strategy \" ours \" instead of \" theirs \" # This will merge in favor for your local changes . . / update . sh -- ours # Don ' t update, but prefetch images and exit . / update . sh -- prefetch","title":"Options"},{"location":"i_u_m_update/#manual-update","text":"","title":"Manual update"},{"location":"i_u_m_update/#step-1","text":"You may want to backup your certificates, as an upgrade from an older mailcow: dockerized version may remove these files: cp - rp data / assets / ssl / tmp / ssl_backup_mailcow Fetch new data from GitHub, commit changes and merge remote repository: # 1 . Get updates / changes git fetch origin master # 2 . Add all changed files to local clone git add - A # 3 . Commit changes , ignore git complaining about username and mail address git commit - m \" Local config at $(date) \" # 4 . Merge changes , prefer mailcow repository , replace \" theirs \" by \" ours \" to change merge strategy git merge - Xtheirs - Xpatience # If it conflicts with files that were deleted from the mailcow repository , just run ... git status -- porcelain | grep - E \" UD|DU \" | awk ' {print $2} ' | xargs rm - v # ... and repeat step 2 and 3 Check data/assets/ssl for your certificates (and dhparams.pem). If you miss them, recover your files: cp - rp / tmp / ssl_backup_mailcow /* data/assets/ssl/","title":"Step 1"},{"location":"i_u_m_update/#step-2","text":"When upgrading from a version older than May 13th, 2017 to a version released after that date, you need to run the following command first as network settings have been changed: docker - compose down Pull new images (if any) and recreate changed containers: docker - compose pull docker - compose up - d --remove-orphans","title":"Step 2"},{"location":"i_u_m_update/#step-3","text":"Clean-up dangling (unused) images and volumes: It is very important to not run these commands when your containers are deleted. Running docker-compose down - for example - will delete your containers. Your volumes are now in a dangling state! Running the commands shown below, will remove your volumes and therefore your data. docker rmi - f $ ( docker images - f \"dangling=true\" - q ) docker volume rm $ ( docker volume ls - qf dangling = true )","title":"Step 3"},{"location":"i_u_m_update/#footnotes","text":"There is no release cycle regarding updates.","title":"Footnotes"},{"location":"model-acl/","text":"Editing a domain administrator or a mailbox user allows to set restrictions to that account. Important : For overlapping modules like sync jobs, which both domain administrators and mailbox users can be granted access to, the domain administrators permissions are inherited, when logging in as mailbox user. Some examples: 1. A domain administror has not access to sync jobs but can login as mailbox user When logging in as mailbox user, he does not gain access to sync jobs, even if the given mailbox user has access when logging in directly 2. A domain administror has access to sync jobs and can login as mailbox user The mailbox user he tries to login as has not access to sync jobs The domain administrator, now logged in as mailbox user, inherits its permission to the mailbox user and can access sync jobs 3. A domain administrator logs in as mailbox user Every permission, that does not exist in a domain administrators ACL, is automatically granted (example: time-limited alias, TLS policy etc.)","title":"ACL"},{"location":"model-sender_rcv/","text":"When a mailbox is created, a user is allowed to send mail from and receive mail for his own mailbox address. Mailbox me @ example . org is created . example . org is a primary domain . Note : a mailbox cannot be created in an alias domain . me @ example . org is only known as me @ example . org . me @ example . org is allowed to send as me @ example . org . We can add an alias domain for example.org: Alias domain alias . com is added and assigned to primary domain example . org . me @ example . org is now known as me @ example . org and me @ alias . com . me @ example . org is now allowed to send as me @ example . org and me @ alias . com . We can add aliases for a mailbox to receive mail for and to send from this new address. It is important to know, that you are not able to receive mail for my-alias@my-alias-domain.tld . You would need to create this particular alias. me @example . org is assigned the alias alias @example . org me @example . org is now known as me @example . org , me @alias . com , alias @example . org me @example . org is NOT known as alias @alias . com . Please note that this does not apply to catch-all aliases: Alias domain alias . com is added and assigned to primary domain example . org me @ example . org is assigned the catch - all alias @ example . org me @ example . org is still just known as me @ example . org , which is the only available send - as option Any email send to alias . com will match the catch - all alias for example . org Administrators and domain administrators can edit mailboxes to allow specific users to send as other mailbox users (\"delegate\" them). You can choose between mailbox users or completely disable the sender check for domains. SOGo \"mail from\" addresses \u00b6 Mailbox users can, obviously, select their own mailbox address, as well as all alias addresses and aliases that exist through alias domains. If you want to select another existing mailbox user as your \"mail from\" address, this user has to delegate you access through SOGo (see SOGo documentation). Moreover a mailcow (domain) administrator needs to grant you access as described above.","title":"Sender and receiver model"},{"location":"model-sender_rcv/#sogo-mail-from-addresses","text":"Mailbox users can, obviously, select their own mailbox address, as well as all alias addresses and aliases that exist through alias domains. If you want to select another existing mailbox user as your \"mail from\" address, this user has to delegate you access through SOGo (see SOGo documentation). Moreover a mailcow (domain) administrator needs to grant you access as described above.","title":"SOGo \"mail from\" addresses"},{"location":"prerequisite-dns/","text":"Below you can find a list of recommended DNS records . While some are mandatory for a mail server (A, MX), others are recommended to build a good reputation score (TXT/SPF) or used for auto-configuration of mail clients (SRV). References \u00b6 A good article covering all relevant topics: \"3 DNS Records Every Email Marketer Must Know\" Another great one, but Zimbra as an example platform: \"Best Practices on Email Protection: SPF, DKIM and DMARC\" An in-depth discussion of SPF, DKIM and DMARC: \"How to eliminate spam and protect your name with DMARC\" Reverse DNS of your IP \u00b6 Make sure that the PTR record of your IP matches the FQDN of your mailcow host: ${MAILCOW_HOSTNAME} 1 . This record is usually set at the provider you leased the IP (server) from. The minimal DNS configuration \u00b6 This example shows you a set of records for one domain managed by mailcow. Each domain that is added to mailcow needs at least this set of records to function correctly. # Name Type Value mail IN A 1 . 2 . 3 . 4 autodiscover IN CNAME mail autoconfig IN CNAME mail @ IN MX 10 mail DKIM, SPF and DMARC \u00b6 In the example DNS zone file snippet below, a simple SPF TXT record is used to only allow THIS server (the MX) to send mail for your domain. Every other server is disallowed but able to (\" ~all \"). Please refer to SPF Project for further reading. @ IN TXT \"v=spf1 mx ~all\" It is highly recommended to create a DKIM TXT record in your mailcow UI and set the corresponding TXT record in your DNS records. Please refer to OpenDKIM for further reading. dkim . _domainkey IN TXT \"v=DKIM1; k=rsa; t=s; s=email; p=...\" The last step in protecting yourself and others is the implementation of a DMARC TXT record, for example by using the DMARC Assistant ( check ). _dmarc IN TXT \"v=DMARC1; p=reject; rua=mailto:mailauth-reports@example.org\" The advanced DNS configuration \u00b6 SRV records specify the server(s) for a specific protocol on your domain. If you want to explicitly announce a service as not provided, give \".\" as the target address (instead of \"mail.example.org.\"). Please refer to RFC 2782 . _imap . _tcp IN SRV 0 1 143 mail . example . org . _imaps . _tcp IN SRV 0 1 993 mail . example . org . _pop3 . _tcp IN SRV 0 1 110 mail . example . org . _pop3s . _tcp IN SRV 0 1 995 mail . example . org . _submission . _tcp IN SRV 0 1 587 mail . example . org . _smtps . _tcp IN SRV 0 1 465 mail . example . org . _sieve . _tcp IN SRV 0 1 4190 mail . example . org . _autodiscover . _tcp IN SRV 0 1 443 mail . example . org . _carddavs . _tcp IN SRV 0 1 443 mail . example . org . _carddavs . _tcp IN TXT \"path=/SOGo/dav/\" _caldavs . _tcp IN SRV 0 1 443 mail . example . org . _caldavs . _tcp IN TXT \"path=/SOGo/dav/\" Testing \u00b6 Here are some tools you can use to verify your DNS configuration: MX Toolbox (DNS, SMTP, RBL) port25.com (DKIM, SPF) Mail-tester (DKIM, DMARC, SPF) DMARC Analyzer (DMARC, SPF) Misc \u00b6 If you are interested in statistics, you can additionally register with the Postmaster Tool by Google and supply a google-site-verification TXT record, which will give you details about spam-classified mails by your domain. This is clearly optional. @ IN TXT \"google-site-verification=...\" A Fully Qualified Domain Name ( FQDN ) is the complete (absolute) domain name for a specific computer or host, on the Internet. The FQDN consists of at least three parts divided by a dot: the hostname (myhost), the domain name (mydomain) and the top level domain in short tld (com). In the example of mx.mailcow.email the hostname would be mx , the domain name 'mailcow' and the tld email . \u21a9","title":"DNS Setup"},{"location":"prerequisite-dns/#references","text":"A good article covering all relevant topics: \"3 DNS Records Every Email Marketer Must Know\" Another great one, but Zimbra as an example platform: \"Best Practices on Email Protection: SPF, DKIM and DMARC\" An in-depth discussion of SPF, DKIM and DMARC: \"How to eliminate spam and protect your name with DMARC\"","title":"References"},{"location":"prerequisite-dns/#reverse-dns-of-your-ip","text":"Make sure that the PTR record of your IP matches the FQDN of your mailcow host: ${MAILCOW_HOSTNAME} 1 . This record is usually set at the provider you leased the IP (server) from.","title":"Reverse DNS of your IP"},{"location":"prerequisite-dns/#the-minimal-dns-configuration","text":"This example shows you a set of records for one domain managed by mailcow. Each domain that is added to mailcow needs at least this set of records to function correctly. # Name Type Value mail IN A 1 . 2 . 3 . 4 autodiscover IN CNAME mail autoconfig IN CNAME mail @ IN MX 10 mail","title":"The minimal DNS configuration"},{"location":"prerequisite-dns/#dkim-spf-and-dmarc","text":"In the example DNS zone file snippet below, a simple SPF TXT record is used to only allow THIS server (the MX) to send mail for your domain. Every other server is disallowed but able to (\" ~all \"). Please refer to SPF Project for further reading. @ IN TXT \"v=spf1 mx ~all\" It is highly recommended to create a DKIM TXT record in your mailcow UI and set the corresponding TXT record in your DNS records. Please refer to OpenDKIM for further reading. dkim . _domainkey IN TXT \"v=DKIM1; k=rsa; t=s; s=email; p=...\" The last step in protecting yourself and others is the implementation of a DMARC TXT record, for example by using the DMARC Assistant ( check ). _dmarc IN TXT \"v=DMARC1; p=reject; rua=mailto:mailauth-reports@example.org\"","title":"DKIM, SPF and DMARC"},{"location":"prerequisite-dns/#the-advanced-dns-configuration","text":"SRV records specify the server(s) for a specific protocol on your domain. If you want to explicitly announce a service as not provided, give \".\" as the target address (instead of \"mail.example.org.\"). Please refer to RFC 2782 . _imap . _tcp IN SRV 0 1 143 mail . example . org . _imaps . _tcp IN SRV 0 1 993 mail . example . org . _pop3 . _tcp IN SRV 0 1 110 mail . example . org . _pop3s . _tcp IN SRV 0 1 995 mail . example . org . _submission . _tcp IN SRV 0 1 587 mail . example . org . _smtps . _tcp IN SRV 0 1 465 mail . example . org . _sieve . _tcp IN SRV 0 1 4190 mail . example . org . _autodiscover . _tcp IN SRV 0 1 443 mail . example . org . _carddavs . _tcp IN SRV 0 1 443 mail . example . org . _carddavs . _tcp IN TXT \"path=/SOGo/dav/\" _caldavs . _tcp IN SRV 0 1 443 mail . example . org . _caldavs . _tcp IN TXT \"path=/SOGo/dav/\"","title":"The advanced DNS configuration"},{"location":"prerequisite-dns/#testing","text":"Here are some tools you can use to verify your DNS configuration: MX Toolbox (DNS, SMTP, RBL) port25.com (DKIM, SPF) Mail-tester (DKIM, DMARC, SPF) DMARC Analyzer (DMARC, SPF)","title":"Testing"},{"location":"prerequisite-dns/#misc","text":"If you are interested in statistics, you can additionally register with the Postmaster Tool by Google and supply a google-site-verification TXT record, which will give you details about spam-classified mails by your domain. This is clearly optional. @ IN TXT \"google-site-verification=...\" A Fully Qualified Domain Name ( FQDN ) is the complete (absolute) domain name for a specific computer or host, on the Internet. The FQDN consists of at least three parts divided by a dot: the hostname (myhost), the domain name (mydomain) and the top level domain in short tld (com). In the example of mx.mailcow.email the hostname would be mx , the domain name 'mailcow' and the tld email . \u21a9","title":"Misc"},{"location":"prerequisite-system/","text":"Before you run mailcow: dockerized , there are a few requirements that you should check: Warning When running mailcow: dockerized on a Debian 8 (Jessie) box, you should switch to kernel 4.9 from Jessie backports to avoid a bug when running Docker containers with healthchecks ! For more details read: github.com/docker/docker/issues/30402 Info mailcow: dockerized requires some ports to be open for incoming connections, so make sure that your firewall is not blocking these. Make sure that no other application is interfering with mailcow's configuration, such as another mail service A correct DNS setup is crucial to every good mailserver setup, so please make sure you got at least the basics covered before you begin! Make sure that your system has a correct date and time setup . This is crucial for stuff like two factor TOTP authentication. Minimum System Resources \u00b6 Please make sure that your system has at least the following resources: Resource mailcow: dockerized CPU 1 GHz RAM 3 GiB + Swap (better: 4 GiB and more + Swap) Disk 15 GiB (without emails) System Type x86_64 ClamAV and Solr are greedy RAM munchers. You can disable them in mailcow.conf by settings SKIP_CLAMD=y and SKIP_SOLR=y. Firewall & Ports \u00b6 Please check if any of mailcow's standard ports are open and not in use by other applications: # netstat - tulpn | grep - E - w '25|80|110|143|443|465|587|993|995' Warning There are several problems with running mailcow on a firewalld/ufw enabled system. You should disable it (if possible) and move your ruleset to the DOCKER-USER chain, which is not cleared by a Docker service restart, instead. See this blog post for information about how to use iptables-persistent with the DOCKER-USER chain. As mailcow runs dockerized, INPUT rules have no effect on restricting access to mailcow. Use the FORWARD chain instead. ** If this command returns any results please remove or stop the application running on that port. You may also adjust mailcows ports via the mailcow.conf configuration file. Default Ports \u00b6 If you have a firewall in front of mailcow, please make sure that these ports are open for incoming connections: Service Protocol Port Container Variable Postfix SMTP TCP 25 postfix-mailcow ${SMTP_PORT} Postfix SMTPS TCP 465 postfix-mailcow ${SMTPS_PORT} Postfix Submission TCP 587 postfix-mailcow ${SUBMISSION_PORT} Dovecot IMAP TCP 143 dovecot-mailcow ${IMAP_PORT} Dovecot IMAPS TCP 993 dovecot-mailcow ${IMAPS_PORT} Dovecot POP3 TCP 110 dovecot-mailcow ${POP_PORT} Dovecot POP3S TCP 995 dovecot-mailcow ${POPS_PORT} Dovecot ManageSieve TCP 4190 dovecot-mailcow ${SIEVE_PORT} HTTP(S) TCP 80/443 nginx-mailcow ${HTTP_PORT} / ${HTTPS_PORT} To bind a service to an IP address, you can prepend the IP like this: SMTP_PORT=1.2.3.4:25 Important : You cannot use IP:PORT bindings in HTTP_PORT and HTTPS_PORT. Please use HTTP_PORT=1234 and HTTP_BIND=1.2.3.4 instead. Date and Time \u00b6 To ensure that you have the correct date and time setup on your system, please check the output of timedatectl status : $ timedatectl status Local time : Sat 2017 - 05 - 06 02 : 12 : 33 CEST Universal time : Sat 2017 - 05 - 06 00 : 12 : 33 UTC RTC time : Sat 2017 - 05 - 06 00 : 12 : 32 Time zone : Europe / Berlin ( CEST , + 0200 ) NTP enabled : yes NTP synchronized : yes RTC in local TZ : no DST active : yes Last DST change : DST began at Sun 2017 - 03 - 26 01 : 59 : 59 CET Sun 2017 - 03 - 26 03 : 00 : 00 CEST Next DST change : DST ends ( the clock jumps one hour backwards ) at Sun 2017 - 10 - 29 02 : 59 : 59 CEST Sun 2017 - 10 - 29 02 : 00 : 00 CET The lines NTP enabled: yes and NTP synchronized: yes indicate wether you have NTP enabled and if it's synchronized. To enable NTP you need to run the command timedatectl set-ntp true . You also need to edit your /etc/systemd/timesyncd.conf : # vim / etc / systemd / timesyncd . conf [ Time ] Servers = 0. pool . ntp . org 1. pool . ntp . org 2. pool . ntp . org 3. pool . ntp . org Hetzner Cloud (and probably others) \u00b6 Check /etc/network/interfaces.d/50-cloud-init.cfg and change the IPv6 interface from eth0:0 to eth0: # Wrong : auto eth0 : 0 iface eth0 : 0 inet6 static # Right : auto eth0 iface eth0 inet6 static Reboot or restart the interface. You may want to disable cloud-init network changes. MTU \u00b6 Especially relevant for OpenStack users: Check your MTU and set it accordingly in docker-compose.yml. See 4.1 in our installation docs .","title":"Prepare Your System"},{"location":"prerequisite-system/#minimum-system-resources","text":"Please make sure that your system has at least the following resources: Resource mailcow: dockerized CPU 1 GHz RAM 3 GiB + Swap (better: 4 GiB and more + Swap) Disk 15 GiB (without emails) System Type x86_64 ClamAV and Solr are greedy RAM munchers. You can disable them in mailcow.conf by settings SKIP_CLAMD=y and SKIP_SOLR=y.","title":"Minimum System Resources"},{"location":"prerequisite-system/#firewall-ports","text":"Please check if any of mailcow's standard ports are open and not in use by other applications: # netstat - tulpn | grep - E - w '25|80|110|143|443|465|587|993|995' Warning There are several problems with running mailcow on a firewalld/ufw enabled system. You should disable it (if possible) and move your ruleset to the DOCKER-USER chain, which is not cleared by a Docker service restart, instead. See this blog post for information about how to use iptables-persistent with the DOCKER-USER chain. As mailcow runs dockerized, INPUT rules have no effect on restricting access to mailcow. Use the FORWARD chain instead. ** If this command returns any results please remove or stop the application running on that port. You may also adjust mailcows ports via the mailcow.conf configuration file.","title":"Firewall &amp; Ports"},{"location":"prerequisite-system/#default-ports","text":"If you have a firewall in front of mailcow, please make sure that these ports are open for incoming connections: Service Protocol Port Container Variable Postfix SMTP TCP 25 postfix-mailcow ${SMTP_PORT} Postfix SMTPS TCP 465 postfix-mailcow ${SMTPS_PORT} Postfix Submission TCP 587 postfix-mailcow ${SUBMISSION_PORT} Dovecot IMAP TCP 143 dovecot-mailcow ${IMAP_PORT} Dovecot IMAPS TCP 993 dovecot-mailcow ${IMAPS_PORT} Dovecot POP3 TCP 110 dovecot-mailcow ${POP_PORT} Dovecot POP3S TCP 995 dovecot-mailcow ${POPS_PORT} Dovecot ManageSieve TCP 4190 dovecot-mailcow ${SIEVE_PORT} HTTP(S) TCP 80/443 nginx-mailcow ${HTTP_PORT} / ${HTTPS_PORT} To bind a service to an IP address, you can prepend the IP like this: SMTP_PORT=1.2.3.4:25 Important : You cannot use IP:PORT bindings in HTTP_PORT and HTTPS_PORT. Please use HTTP_PORT=1234 and HTTP_BIND=1.2.3.4 instead.","title":"Default Ports"},{"location":"prerequisite-system/#date-and-time","text":"To ensure that you have the correct date and time setup on your system, please check the output of timedatectl status : $ timedatectl status Local time : Sat 2017 - 05 - 06 02 : 12 : 33 CEST Universal time : Sat 2017 - 05 - 06 00 : 12 : 33 UTC RTC time : Sat 2017 - 05 - 06 00 : 12 : 32 Time zone : Europe / Berlin ( CEST , + 0200 ) NTP enabled : yes NTP synchronized : yes RTC in local TZ : no DST active : yes Last DST change : DST began at Sun 2017 - 03 - 26 01 : 59 : 59 CET Sun 2017 - 03 - 26 03 : 00 : 00 CEST Next DST change : DST ends ( the clock jumps one hour backwards ) at Sun 2017 - 10 - 29 02 : 59 : 59 CEST Sun 2017 - 10 - 29 02 : 00 : 00 CET The lines NTP enabled: yes and NTP synchronized: yes indicate wether you have NTP enabled and if it's synchronized. To enable NTP you need to run the command timedatectl set-ntp true . You also need to edit your /etc/systemd/timesyncd.conf : # vim / etc / systemd / timesyncd . conf [ Time ] Servers = 0. pool . ntp . org 1. pool . ntp . org 2. pool . ntp . org 3. pool . ntp . org","title":"Date and Time"},{"location":"prerequisite-system/#hetzner-cloud-and-probably-others","text":"Check /etc/network/interfaces.d/50-cloud-init.cfg and change the IPv6 interface from eth0:0 to eth0: # Wrong : auto eth0 : 0 iface eth0 : 0 inet6 static # Right : auto eth0 iface eth0 inet6 static Reboot or restart the interface. You may want to disable cloud-init network changes.","title":"Hetzner Cloud (and probably others)"},{"location":"prerequisite-system/#mtu","text":"Especially relevant for OpenStack users: Check your MTU and set it accordingly in docker-compose.yml. See 4.1 in our installation docs .","title":"MTU"},{"location":"third_party-gitea/","text":"With Gitea' ability to authenticate over SMTP it is trivial to integrate it with mailcow. Few changes are needed: 1. Open docker-compose.override.yml and add gitea: version : '2.1' services : gitea - mailcow : image : gitea / gitea : 1 volumes : - . / data / gitea : / data networks : mailcow - network : aliases : - gitea ports : - \"${GITEA_SSH_PORT:-127.0.0.1:4000}:22\" 2. Create data/conf/nginx/site.gitea.custom , add: location / gitea / { proxy_pass http : // gitea : 3000 / ; } 3. Open mailcow.conf and define the binding you want gitea to use for SSH. Example: GITEA_SSH_PORT = 127 . 0 . 0 . 1 : 4000 5. Run docker-compose up -d to bring up the gitea container and run docker-compose restart nginx-mailcow afterwards. 6. Open http://${MAILCOW_HOSTNAME}/gitea/ , for example http://mx.example.org/gitea/ . For database details set mysql as database host. Use the value of DBNAME found in mailcow.conf as database name, DBUSER as database user and DBPASS as database password. 7. Once the installation is complete, login as admin and set \"settings\" -> \"authorization\" -> \"enable SMTP\". SMTP Host should be postfix with port 587 , set Skip TLS Verify as we are using an unlisted SAN (\"postfix\" is most likely not part of your certificate). 8. Create data/gitea/gitea/conf/app.ini and set following values. You can consult gitea cheat sheet for their meaning and other possible values. [server] SSH_LISTEN_PORT = 22 # For GITEA_SSH_PORT=127.0.0.1:4000 in mailcow.conf, set: SSH_DOMAIN = 127.0.0.1 SSH_PORT = 4000 # For MAILCOW_HOSTNAME=mx.example.org in mailcow.conf (and default ports for HTTPS), set: ROOT_URL = https://mx.example.org/gitea/ 9. Restart gitea with docker-compose restart gitea-mailcow . Your users should be able to login with mailcow managed accounts.","title":"Gitea"},{"location":"third_party-gogs/","text":"With Gogs' ability to authenticate over SMTP it is trivial to integrate it with mailcow. Few changes are needed: 1. Open docker-compose.override.yml and add Gogs: version : '2.1' services : gogs - mailcow : image : gogs / gogs volumes : - . / data / gogs : / data networks : mailcow - network : aliases : - gogs ports : - \"${GOGS_SSH_PORT:-127.0.0.1:4000}:22\" 2. Create data/conf/nginx/site.gogs.custom , add: location / gogs / { proxy_pass http : // gogs : 3000 / ; } 3. Open mailcow.conf and define the binding you want Gogs to use for SSH. Example: GOGS_SSH_PORT = 127 . 0 . 0 . 1 : 4000 5. Run docker-compose up -d to bring up the Gogs container and run docker-compose restart nginx-mailcow afterwards. 6. Open http://${MAILCOW_HOSTNAME}/gogs/ , for example http://mx.example.org/gogs/ . For database details set mysql as database host. Use the value of DBNAME found in mailcow.conf as database name, DBUSER as database user and DBPASS as database password. 7. Once the installation is complete, login as admin and set \"settings\" -> \"authorization\" -> \"enable SMTP\". SMTP Host should be postfix with port 587 , set Skip TLS Verify as we are using an unlisted SAN (\"postfix\" is most likely not part of your certificate). 8. Create data/gogs/gogs/conf/app.ini and set following values. You can consult Gogs cheat sheet for their meaning and other possible values. [server] SSH_LISTEN_PORT = 22 # For GOGS_SSH_PORT=127.0.0.1:4000 in mailcow.conf, set: SSH_DOMAIN = 127.0.0.1 SSH_PORT = 4000 # For MAILCOW_HOSTNAME=mx.example.org in mailcow.conf (and default ports for HTTPS), set: ROOT_URL = https://mx.example.org/gogs/ 9. Restart Gogs with docker-compose restart gogs-mailcow . Your users should be able to login with mailcow managed accounts.","title":"Gogs"},{"location":"third_party-portainer/","text":"In order to enable Portainer, the docker-compose.yml and site.conf for Nginx must be modified. 1. Create a new file docker-compose.override.yml in the mailcow-dockerized root folder and insert the following configuration version : '2.1' services : portainer - mailcow : image : portainer / portainer volumes : - / var / run / docker . sock : / var / run / docker . sock - . / data / conf / portainer : / data restart : always dns : - 172 . 22 . 1 . 254 dns_search : mailcow - network networks : mailcow - network : aliases : - portainer 2a. Create data/conf/nginx/portainer.conf : upstream portainer { server portainer-mailcow : 9000 ; } map $ http_upgrade $ connection_upgrade { default upgrade ; '' close ; } 2b. Insert a new location to the default mailcow site by creating the file data/conf/nginx/site.portainer.custom : location / portainer / { proxy_http_version 1 . 1 ; proxy_set_header Host $ http_host ; # required for docker client's sake proxy_set_header X - Real - IP $ remote_addr ; # pass on real client's IP proxy_set_header X - Forwarded - For $ proxy_add_x_forwarded_for ; proxy_set_header X - Forwarded - Proto $ scheme ; proxy_read_timeout 900 ; proxy_set_header Connection \"\" ; proxy_buffers 32 4 k ; proxy_pass http : // portainer / ; } location / portainer / api / websocket / { proxy_http_version 1 . 1 ; proxy_set_header Upgrade $ http_upgrade ; proxy_set_header Connection $c onnection_upgrade ; proxy_pass http : // portainer / api / websocket / ; } 3. Apply your changes: docker - compose up - d && docker - compose restart nginx - mailcow Now you can simply navigate to https://${MAILCOW_HOSTNAME}/portainer/ to view your Portainer container monitoring page. You\u2019ll then be prompted to specify a new password for the admin account. After specifying your password, you\u2019ll then be able to connect to the Portainer UI.","title":"Portainer"},{"location":"third_party-roundcube/","text":"Download Roundcube 1.3.x to the web htdocs directory and extract it (here rc/ ): cd data / web wget - O - https : // github . com / roundcube / roundcubemail / releases / download / 1 . 3 . x / roundcubemail - 1 . 3 . x - complete . tar . gz | tar xfvz - # Change folder name mv roundcubemail - 1 . 3 . x rc # Change permissions chown - R root : rc / Create a file data/web/rc/config/config.inc.php with the following content. Change the des_key parameter to a random value. It is used to temporarily store your IMAP password. The \"db_prefix\" is optional but recommended. < ? php error_reporting ( 0 ) ; if ( ! file_exists ( ' /tmp/mime.types ' )) { file_put_contents ( \" /tmp/mime.types \" , fopen ( \" http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types \" , ' r ' )) ; } $c onfig = array () ; $c onfig [ ' db_dsnw ' ] = ' mysql:// ' . getenv ( ' DBUSER ' ) . ' : ' . getenv ( ' DBPASS ' ) . ' @mysql/ ' . getenv ( ' DBNAME ' ) ; $c onfig [ ' default_host ' ] = ' tls://dovecot ' ; $c onfig [ ' default_port ' ] = ' 143 ' ; $c onfig [ ' smtp_server ' ] = ' tls://postfix ' ; $c onfig [ ' smtp_port ' ] = 587 ; $c onfig [ ' smtp_user ' ] = ' %u ' ; $c onfig [ ' smtp_pass ' ] = ' %p ' ; $c onfig [ ' support_url ' ] = '' ; $c onfig [ ' product_name ' ] = ' Roundcube Webmail ' ; $c onfig [ ' des_key ' ] = ' yourrandomstring_changeme ' ; $c onfig [ ' log_dir ' ] = ' /dev/null ' ; $c onfig [ ' temp_dir ' ] = ' /tmp ' ; $c onfig [ ' plugins ' ] = array ( ' archive ' , ' managesieve ' ) ; $c onfig [ ' skin ' ] = ' larry ' ; $c onfig [ ' mime_types ' ] = ' /tmp/mime.types ' ; $c onfig [ ' imap_conn_options ' ] = array ( ' ssl ' => array ( ' verify_peer ' => false , ' verify_peer_name ' => false , ' allow_self_signed ' => true ) ) ; $c onfig [ ' enable_installer ' ] = true ; $c onfig [ ' smtp_conn_options ' ] = array ( ' ssl ' => array ( ' verify_peer ' => false , ' verify_peer_name ' => false , ' allow_self_signed ' => true ) ) ; $c onfig [ ' managesieve_port ' ] = 4190 ; $c onfig [ ' managesieve_host ' ] = ' tls://dovecot ' ; $c onfig [ ' managesieve_conn_options ' ] = array ( ' ssl ' => array ( ' verify_peer ' => false , ' verify_peer_name ' => false , ' allow_self_signed ' => true ) ) ; // Enables separate management interface for vacation responses ( out - of - office ) // 0 - no separate section ( default ) , // 1 - add Vacation section , // 2 - add Vacation section , but hide Filters section $c onfig [ ' managesieve_vacation ' ] = 1 ; $c onfig [ ' db_prefix ' ] = ' mailcow_rc1 ' ; Point your browser to https://myserver/rc/installer and follow the instructions. Initialize the database and leave the installer. Delete the directory data/web/rc/installer after a successful installation! Enable change password function in Roundcube \u00b6 Open data/web/rc/config/config.inc.php and enable the password plugin: ... $ config [ 'plugins' ] = array ( 'archive' , 'password' , ); ... Open data/web/rc/plugins/password/password.php , search for case 'ssha': and add above: case ' ssha256 ' : $ salt = rcube_utils :: random_bytes ( 8 ) ; $c rypted = base64_encode ( hash ( ' sha256 ' , $ password . $ salt , TRUE ) . $ salt ) ; $ prefix = ' {SSHA256} ' ; break ; Open data/web/rc/plugins/password/config.inc.php and change the following parameters (or add them at the bottom of that file): $ config [ 'password_driver' ] = 'sql' ; $ config [ 'password_algorithm' ] = 'ssha256' ; $ config [ 'password_algorithm_prefix' ] = '{SSHA256}' ; $ config [ 'password_query' ] = \"UPDATE mailbox SET password = %P WHERE username = %u\" ; Integrate CardDAV addressbooks in Roundcube \u00b6 Download the latest release of RCMCardDAV to the Roundcube plugin directory and extract it (here rc/plugins ): cd data / web / rc / plugins wget - O - https : // github . com / blind - coder / rcmcarddav / releases / download / v3 . 0 . 3 / carddav - 3 . 0 . 3 . tar . bz2 | tar xfvj - chown - R root : carddav / Copy the file config.inc.php.dist to config.inc.php (here in rc/plugins/carddav ) and append the following preset to the end of the file - don't forget to replace mx.example.org with your own hostname: $ prefs [ 'SOGo' ] = array ( 'name' => 'SOGo' , 'username' => '%u' , 'password' => '%p' , 'url' => 'https://mx.example.org/SOGo/dav/%u/' , 'carddav_name_only' => true , 'use_categories' => true , 'active' => true , 'readonly' => false , 'refresh_time' => '02:00:00' , 'fixed' => array ( 'active' , 'name' , 'username' , 'password' , 'refresh_time' ), 'hide' => false , ); Please note, that this preset only integrates the default addressbook (the one that's named \"Personal Address Book\" and can't be deleted). Additional addressbooks are currently not automatically detected but can be manually added within the roundecube settings. Enable the plugin by adding carddav to $config['plugins'] in roundcube/config/config.inc.php . If you want to remove the default addressbooks (stored in the Roundcube database), so that only the CardDAV addressbooks are accessable, append $config['address_book_type'] = ''; to the config file data/web/rc/config/config.inc.php . Optionally, you can add Roundcube's link to the mailcow Apps list. To do this, open or create data/web/inc/vars.local.inc.php and add the following code-block: NOTE: Don't forget to add the <?php delimiter on the first line ... $ MAILCOW_APPS = array ( array ( 'name' => 'SOGo' , 'link' => '/SOGo/' ), array ( 'name' => 'Roundcube' , 'link' => '/rc/' ) ); ...","title":"Roundcube"},{"location":"third_party-roundcube/#enable-change-password-function-in-roundcube","text":"Open data/web/rc/config/config.inc.php and enable the password plugin: ... $ config [ 'plugins' ] = array ( 'archive' , 'password' , ); ... Open data/web/rc/plugins/password/password.php , search for case 'ssha': and add above: case ' ssha256 ' : $ salt = rcube_utils :: random_bytes ( 8 ) ; $c rypted = base64_encode ( hash ( ' sha256 ' , $ password . $ salt , TRUE ) . $ salt ) ; $ prefix = ' {SSHA256} ' ; break ; Open data/web/rc/plugins/password/config.inc.php and change the following parameters (or add them at the bottom of that file): $ config [ 'password_driver' ] = 'sql' ; $ config [ 'password_algorithm' ] = 'ssha256' ; $ config [ 'password_algorithm_prefix' ] = '{SSHA256}' ; $ config [ 'password_query' ] = \"UPDATE mailbox SET password = %P WHERE username = %u\" ;","title":"Enable change password function in Roundcube"},{"location":"third_party-roundcube/#integrate-carddav-addressbooks-in-roundcube","text":"Download the latest release of RCMCardDAV to the Roundcube plugin directory and extract it (here rc/plugins ): cd data / web / rc / plugins wget - O - https : // github . com / blind - coder / rcmcarddav / releases / download / v3 . 0 . 3 / carddav - 3 . 0 . 3 . tar . bz2 | tar xfvj - chown - R root : carddav / Copy the file config.inc.php.dist to config.inc.php (here in rc/plugins/carddav ) and append the following preset to the end of the file - don't forget to replace mx.example.org with your own hostname: $ prefs [ 'SOGo' ] = array ( 'name' => 'SOGo' , 'username' => '%u' , 'password' => '%p' , 'url' => 'https://mx.example.org/SOGo/dav/%u/' , 'carddav_name_only' => true , 'use_categories' => true , 'active' => true , 'readonly' => false , 'refresh_time' => '02:00:00' , 'fixed' => array ( 'active' , 'name' , 'username' , 'password' , 'refresh_time' ), 'hide' => false , ); Please note, that this preset only integrates the default addressbook (the one that's named \"Personal Address Book\" and can't be deleted). Additional addressbooks are currently not automatically detected but can be manually added within the roundecube settings. Enable the plugin by adding carddav to $config['plugins'] in roundcube/config/config.inc.php . If you want to remove the default addressbooks (stored in the Roundcube database), so that only the CardDAV addressbooks are accessable, append $config['address_book_type'] = ''; to the config file data/web/rc/config/config.inc.php . Optionally, you can add Roundcube's link to the mailcow Apps list. To do this, open or create data/web/inc/vars.local.inc.php and add the following code-block: NOTE: Don't forget to add the <?php delimiter on the first line ... $ MAILCOW_APPS = array ( array ( 'name' => 'SOGo' , 'link' => '/SOGo/' ), array ( 'name' => 'Roundcube' , 'link' => '/rc/' ) ); ...","title":"Integrate CardDAV addressbooks in Roundcube"},{"location":"third_party-thunderbird/","text":"Build the SOGo Connector plugin \u00b6 Install GNU Make, tar, and ZIP if you don't already have them installed. On Debian/Ubuntu, this can be done using apt - get install make tar zip Next, go to data/web inside mailcow-dockerized. Place the file thunderbird-plugins.php into that directory. Create a new directory thunderbird-plugins and place the script build-plugins.sh into it. Finally, execute the script with your hostname as an argument and piping it the names of all domains that mailcow handles. All of this can be done using the following commands: cd data / web curl - LO https : // github . com / mailcow / mailcow - dockerized - docs / raw / master / docs / download / thunderbird - plugins . php mkdir thunderbird - plugins cd thunderbird - plugins curl - Lo build - plugins . sh https : // github . com / mailcow / mailcow - dockerized - docs / raw / master / docs / download / build - thunderbird - plugins . sh chmod + x build - plugins . sh echo example . com example . org | . / build - plugins . sh mailcow . example . com Install it in Thunderbird \u00b6 After you have set up your mailcow IMAP account in Thunderbird, download the SOGo Connector plugin for your domain, e.g. https://mailcow.example.com/thunderbird-plugins/sogo-connector-68.0.0-example.com.xpi , and install it into Thunderbird. All your address books and calendars will be configured automatically.","title":"SOGo Connector for Thunderbird"},{"location":"third_party-thunderbird/#build-the-sogo-connector-plugin","text":"Install GNU Make, tar, and ZIP if you don't already have them installed. On Debian/Ubuntu, this can be done using apt - get install make tar zip Next, go to data/web inside mailcow-dockerized. Place the file thunderbird-plugins.php into that directory. Create a new directory thunderbird-plugins and place the script build-plugins.sh into it. Finally, execute the script with your hostname as an argument and piping it the names of all domains that mailcow handles. All of this can be done using the following commands: cd data / web curl - LO https : // github . com / mailcow / mailcow - dockerized - docs / raw / master / docs / download / thunderbird - plugins . php mkdir thunderbird - plugins cd thunderbird - plugins curl - Lo build - plugins . sh https : // github . com / mailcow / mailcow - dockerized - docs / raw / master / docs / download / build - thunderbird - plugins . sh chmod + x build - plugins . sh echo example . com example . org | . / build - plugins . sh mailcow . example . com","title":"Build the SOGo Connector plugin"},{"location":"third_party-thunderbird/#install-it-in-thunderbird","text":"After you have set up your mailcow IMAP account in Thunderbird, download the SOGo Connector plugin for your domain, e.g. https://mailcow.example.com/thunderbird-plugins/sogo-connector-68.0.0-example.com.xpi , and install it into Thunderbird. All your address books and calendars will be configured automatically.","title":"Install it in Thunderbird"},{"location":"u_e-80_to_443/","text":"Since February the 28th 2017 mailcow does come with port 80 and 443 enabled. Do not use the config below for reverse proxy setups , please see our reverse proxy guide for this, which includes a redirect from HTTP to HTTPS. Open mailcow.conf and set HTTP_BIND=0.0.0.0 - if not already set. Create a new file data/conf/nginx/redirect.conf and add the following server config to the file: server { root / web ; listen 80 default_server ; listen [::]: 80 default_server ; include / etc / nginx / conf . d / server_name . active ; if ( $ request_uri ~* \" %0A|%0D \" ) { return 403 ; } location ^~ / . well - known / acme - challenge / { allow all ; default_type \" text/plain \" ; } location / { return 301 https : // $ host $ uri $ is_args $a rgs ; } } In case you changed the HTTP_BIND parameter, recreate the container: docker - compose up - d Otherwise restart Nginx: docker - compose restart nginx - mailcow","title":"Redirect HTTP to HTTPS"},{"location":"u_e-autodiscover_config/","text":"Open/create data/web/inc/vars.local.inc.php and add your changes to the configuration array. Changes will be merged with \"$autodiscover_config\" in data/web/inc/vars.inc.php ): < ? php $a utodiscover_config = array ( // General autodiscover service type : \" activesync \" or \" imap \" // emClient uses autodiscover , but does not support ActiveSync . mailcow excludes emClient from ActiveSync . ' autodiscoverType ' => ' activesync ' , // If autodiscoverType => activesync , also use ActiveSync ( EAS ) for Outlook desktop clients ( >= Outlook 2013 on Windows ) // Outlook for Mac does not support ActiveSync ' useEASforOutlook ' => ' yes ' , // Please don ' t use STARTTLS-enabled service ports in the \"port\" variable. // The autodiscover service will always point to SMTPS and IMAPS ( TLS - wrapped services ) . // The autoconfig service will additionally announce the STARTTLS - enabled ports , specified in the \" tlsport \" variable . ' imap ' => array ( ' server ' => $ mailcow_hostname , ' port ' => array_pop ( explode ( ' : ' , getenv ( ' IMAPS_PORT ' ))) , ' tlsport ' => array_pop ( explode ( ' : ' , getenv ( ' IMAP_PORT ' ))) , ) , ' pop3 ' => array ( ' server ' => $ mailcow_hostname , ' port ' => array_pop ( explode ( ' : ' , getenv ( ' POPS_PORT ' ))) , ' tlsport ' => array_pop ( explode ( ' : ' , getenv ( ' POP_PORT ' ))) , ) , ' smtp ' => array ( ' server ' => $ mailcow_hostname , ' port ' => array_pop ( explode ( ' : ' , getenv ( ' SMTPS_PORT ' ))) , ' tlsport ' => array_pop ( explode ( ' : ' , getenv ( ' SUBMISSION_PORT ' ))) , ) , ' activesync ' => array ( ' url ' => ' https:// ' .$ mailcow_hostname . ( $ https_port == 443 ? '' : ' : ' .$ https_port ) . ' /Microsoft-Server-ActiveSync ' , ) , ' caldav ' => array ( ' server ' => $ mailcow_hostname , ' port ' => $ https_port , ) , ' carddav ' => array ( ' server ' => $ mailcow_hostname , ' port ' => $ https_port , ) , ) ; To always use IMAP and SMTP instead of EAS, set 'autodiscoverType' => 'imap' . Disable ActiveSync for Outlook desktop clients by setting \"useEASforOutlook\" to \"no\".","title":"Autodiscover / Autoconfig"},{"location":"u_e-backup_restore-maildir/","text":"Backup \u00b6 This line backups the vmail directory to a file backup_vmail.tar.gz in the mailcow root directory: cd / path / to / mailcow - dockerized docker run -- rm - i - v $ ( docker inspect -- format ' {{ range .Mounts }}{{ if eq .Destination \"/var/vmail\" }}{{ .Name }}{{ end }}{{ end }} ' $ ( docker - compose ps - q dovecot - mailcow )) : / vmail - v ${ PWD }: / backup debian : stretch - slim tar cvfz / backup / backup_vmail . tar . gz / vmail You can change the path by adjusting ${PWD} (which equals to the current directory) to any path you have write-access to. Set the filename backup_vmail.tar.gz to any custom name, but leave the path as it is. Example: [...] tar cvfz /backup/my_own_filename_.tar.gz Restore \u00b6 cd / path / to / mailcow - dockerized docker run -- rm - it - v $ ( docker inspect -- format ' {{ range .Mounts }}{{ if eq .Destination \"/var/vmail\" }}{{ .Name }}{{ end }}{{ end }} ' $ ( docker - compose ps - q dovecot - mailcow )) : / vmail - v ${ PWD }: / backup debian : stretch - slim tar xvfz / backup / backup_vmail . tar . gz","title":"Maildir"},{"location":"u_e-backup_restore-maildir/#backup","text":"This line backups the vmail directory to a file backup_vmail.tar.gz in the mailcow root directory: cd / path / to / mailcow - dockerized docker run -- rm - i - v $ ( docker inspect -- format ' {{ range .Mounts }}{{ if eq .Destination \"/var/vmail\" }}{{ .Name }}{{ end }}{{ end }} ' $ ( docker - compose ps - q dovecot - mailcow )) : / vmail - v ${ PWD }: / backup debian : stretch - slim tar cvfz / backup / backup_vmail . tar . gz / vmail You can change the path by adjusting ${PWD} (which equals to the current directory) to any path you have write-access to. Set the filename backup_vmail.tar.gz to any custom name, but leave the path as it is. Example: [...] tar cvfz /backup/my_own_filename_.tar.gz","title":"Backup"},{"location":"u_e-backup_restore-maildir/#restore","text":"cd / path / to / mailcow - dockerized docker run -- rm - it - v $ ( docker inspect -- format ' {{ range .Mounts }}{{ if eq .Destination \"/var/vmail\" }}{{ .Name }}{{ end }}{{ end }} ' $ ( docker - compose ps - q dovecot - mailcow )) : / vmail - v ${ PWD }: / backup debian : stretch - slim tar xvfz / backup / backup_vmail . tar . gz","title":"Restore"},{"location":"u_e-backup_restore-mysql/","text":"Backup \u00b6 cd / path / to / mailcow - dockerized source mailcow . conf DATE = $ ( date + \" %Y%m%d_%H%M%S \" ) docker - compose exec - T mysql - mailcow mysqldump -- default - character - set = utf8mb4 - u ${ DBUSER } - p ${ DBPASS } ${ DBNAME } > backup_ ${ DBNAME } _ ${ DATE }. sql Restore \u00b6 Warning You should redirect the SQL dump without docker-compose to prevent parsing errors. cd / path / to / mailcow - dockerized source mailcow . conf docker exec - i $ ( docker - compose ps - q mysql - mailcow ) mysql - u ${ DBUSER } - p ${ DBPASS } ${ DBNAME } < backup_file . sql","title":"MySQL"},{"location":"u_e-backup_restore-mysql/#backup","text":"cd / path / to / mailcow - dockerized source mailcow . conf DATE = $ ( date + \" %Y%m%d_%H%M%S \" ) docker - compose exec - T mysql - mailcow mysqldump -- default - character - set = utf8mb4 - u ${ DBUSER } - p ${ DBPASS } ${ DBNAME } > backup_ ${ DBNAME } _ ${ DATE }. sql","title":"Backup"},{"location":"u_e-backup_restore-mysql/#restore","text":"Warning You should redirect the SQL dump without docker-compose to prevent parsing errors. cd / path / to / mailcow - dockerized source mailcow . conf docker exec - i $ ( docker - compose ps - q mysql - mailcow ) mysql - u ${ DBUSER } - p ${ DBPASS } ${ DBNAME } < backup_file . sql","title":"Restore"},{"location":"u_e-change_config/","text":"The most important configuration files are mounted from the host into the related containers: data / conf \u251c\u2500\u2500 unbound \u2502 \u2514\u2500\u2500 unbound . conf \u251c\u2500\u2500 dovecot \u2502 \u251c\u2500\u2500 dovecot . conf \u2502 \u251c\u2500\u2500 dovecot - master . passwd \u2502 \u251c\u2500\u2500 sieve_after \u2502 \u2514\u2500\u2500 sql \u2502 \u251c\u2500\u2500 dovecot - dict - sql . conf \u2502 \u2514\u2500\u2500 dovecot - mysql . conf \u251c\u2500\u2500 mysql \u2502 \u2514\u2500\u2500 my . cnf \u251c\u2500\u2500 nginx \u2502 \u251c\u2500\u2500 dynmaps . conf \u2502 \u251c\u2500\u2500 site . conf \u2502 \u2514\u2500\u2500 templates \u2502 \u251c\u2500\u2500 listen_plain . template \u2502 \u251c\u2500\u2500 listen_ssl . template \u2502 \u2514\u2500\u2500 server_name . template \u251c\u2500\u2500 postfix \u2502 \u251c\u2500\u2500 main . cf \u2502 \u251c\u2500\u2500 master . cf \u2502 \u251c\u2500\u2500 postscreen_access . cidr \u2502 \u251c\u2500\u2500 smtp_dsn_filter \u2502 \u2514\u2500\u2500 sql \u2502 \u251c\u2500\u2500 mysql_relay_recipient_maps . cf \u2502 \u251c\u2500\u2500 mysql_tls_enforce_in_policy . cf \u2502 \u251c\u2500\u2500 mysql_tls_enforce_out_policy . cf \u2502 \u251c\u2500\u2500 mysql_virtual_alias_domain_catchall_maps . cf \u2502 \u251c\u2500\u2500 mysql_virtual_alias_domain_maps . cf \u2502 \u251c\u2500\u2500 mysql_virtual_alias_maps . cf \u2502 \u251c\u2500\u2500 mysql_virtual_domains_maps . cf \u2502 \u251c\u2500\u2500 mysql_virtual_mailbox_maps . cf \u2502 \u251c\u2500\u2500 mysql_virtual_relay_domain_maps . cf \u2502 \u251c\u2500\u2500 mysql_virtual_sender_acl . cf \u2502 \u2514\u2500\u2500 mysql_virtual_spamalias_maps . cf \u251c\u2500\u2500 rspamd \u2502 \u251c\u2500\u2500 dynmaps \u2502 \u2502 \u251c\u2500\u2500 authoritative . php \u2502 \u2502 \u251c\u2500\u2500 settings . php \u2502 \u2502 \u251c\u2500\u2500 tags . php \u2502 \u2502 \u2514\u2500\u2500 vars . inc . php -> .. / .. / .. / web / inc / vars . inc . php \u2502 \u251c\u2500\u2500 local . d \u2502 \u2502 \u251c\u2500\u2500 dkim . conf \u2502 \u2502 \u251c\u2500\u2500 metrics . conf \u2502 \u2502 \u251c\u2500\u2500 options . inc \u2502 \u2502 \u251c\u2500\u2500 redis . conf \u2502 \u2502 \u251c\u2500\u2500 rspamd . conf . local \u2502 \u2502 \u2514\u2500\u2500 statistic . conf \u2502 \u251c\u2500\u2500 lua \u2502 \u2502 \u2514\u2500\u2500 rspamd . local . lua \u2502 \u2514\u2500\u2500 override . d \u2502 \u251c\u2500\u2500 logging . inc \u2502 \u251c\u2500\u2500 worker - controller . inc \u2502 \u2514\u2500\u2500 worker - normal . inc \u2514\u2500\u2500 sogo \u251c\u2500\u2500 sieve . creds \u2514\u2500\u2500 sogo . conf Just change the according configuration file on the host and restart the related service: docker - compose restart service - mailcow","title":"Adjust Service Configurations"},{"location":"u_e-deinstall/","text":"To remove mailcow: dockerized with all it's volumes, images and containers do: docker - compose down - v --rmi all --remove-orphans Info -v Remove named volumes declared in the volumes section of the Compose file and anonymous volumes attached to containers. --rmi Remove images. Type must be one of: all : Remove all images used by any service. local : Remove only images that don't have a custom tag set by the image field. --remove-orphans Remove containers for services not defined in the compose file. By default docker-compose down only removes currently active containers and networks defined in the docker-compose.yml .","title":"Deinstall"},{"location":"u_e-docker-cust_dockerfiles/","text":"Make your changes in data/Dockerfiles/$service and build the image locally: docker build data / Dockerfiles / service - t mailcow / $ service Now auto-recreate modified containers: docker - compose up - d","title":"Customize Dockerfiles"},{"location":"u_e-docker-dc_bash_compl/","text":"To get some sexy bash completion inside your containers simply execute the following: curl - L https : // raw . githubusercontent . com / docker / compose / $ ( docker - compose version --short)/contrib/completion/bash/docker-compose -o /etc/bash_completion.d/docker-compose","title":"Docker Compose Bash Completion"},{"location":"u_e-dovecot-any_acl/","text":"On August the 17th, we disabled the possibility to share with \"any\" or \"all authenticated users\" by default. This function can be re-enabled by setting ACL_ANYONE to allow in mailcow.conf: ACL_ANYONE = allow Apply the changes by running docker-compose up -d .","title":"(Re-)Enable any and all authenticated ACL settings"},{"location":"u_e-dovecot-expunge/","text":"If you want to delete old mails out of the .Junk or .Trash folders or maybe delete all read mails that are older than a certain amount of time you may use dovecot's tool doveadm man doveadm-expunge . The manual way \u00b6 That said, let's dive in: Delete a user's mails inside the junk folder that are read and older than 4 hours docker - compose exec dovecot - mailcow doveadm expunge - u ' mailbox@example.com ' mailbox ' Junk ' SEEN not SINCE 4 h Delete all user's mails in the junk folder that are older than 7 days docker - compose exec dovecot - mailcow doveadm expunge - A mailbox ' Junk ' savedbefore 7 d Delete mails inside a custom folder inside a user's inbox that are not flagged and older than 2 weeks docker - compose exec dovecot - mailcow doveadm expunge - u ' mailbox@example.com ' mailbox ' INBOX/custom-folder ' not FLAGGED not SINCE 2 w Info For possible time spans or search keys have a look at man doveadm-search-query Make it automatic \u00b6 If you want to automate such a task you can create a cron job on your host that calls a script like the one below: #!/bin/bash # Path to mailcow-dockerized, e.g. /opt/mailcow-dockerized cd /path/to/your/mailcow-dockerized /usr/local/bin/docker-compose exec -T dovecot-mailcow doveadm expunge -A mailbox 'Junk' savedbefore 2w /usr/local/bin/docker-compose exec -T dovecot-mailcow doveadm expunge -A mailbox 'Junk' SEEN not SINCE 12h [ ... ] To create a cron job you may execute crontab -e and insert something like the following to execute a script: # Execute everyday at 04 : 00 A . M . 0 4 * * * / path / to / your / expunge_mailboxes . sh","title":"Expunge a User's Mails"},{"location":"u_e-dovecot-expunge/#the-manual-way","text":"That said, let's dive in: Delete a user's mails inside the junk folder that are read and older than 4 hours docker - compose exec dovecot - mailcow doveadm expunge - u ' mailbox@example.com ' mailbox ' Junk ' SEEN not SINCE 4 h Delete all user's mails in the junk folder that are older than 7 days docker - compose exec dovecot - mailcow doveadm expunge - A mailbox ' Junk ' savedbefore 7 d Delete mails inside a custom folder inside a user's inbox that are not flagged and older than 2 weeks docker - compose exec dovecot - mailcow doveadm expunge - u ' mailbox@example.com ' mailbox ' INBOX/custom-folder ' not FLAGGED not SINCE 2 w Info For possible time spans or search keys have a look at man doveadm-search-query","title":"The manual way"},{"location":"u_e-dovecot-expunge/#make-it-automatic","text":"If you want to automate such a task you can create a cron job on your host that calls a script like the one below: #!/bin/bash # Path to mailcow-dockerized, e.g. /opt/mailcow-dockerized cd /path/to/your/mailcow-dockerized /usr/local/bin/docker-compose exec -T dovecot-mailcow doveadm expunge -A mailbox 'Junk' savedbefore 2w /usr/local/bin/docker-compose exec -T dovecot-mailcow doveadm expunge -A mailbox 'Junk' SEEN not SINCE 12h [ ... ] To create a cron job you may execute crontab -e and insert something like the following to execute a script: # Execute everyday at 04 : 00 A . M . 0 4 * * * / path / to / your / expunge_mailboxes . sh","title":"Make it automatic"},{"location":"u_e-dovecot-fts/","text":"Solr is used for setups with memory >= 3.5 GiB to provide full-text search in Dovecot. Please be aware that applications like Solr may need maintenance from time to time. Besides that, Solr will eat a lot of RAM, depending on the usage of your server. Please avoid it on machines with less than 3 GB RAM. The default heap size (1024 M) is defined in mailcow.conf. Since we run in Docker and create our containers with the \"restart: always\" flag, a oom situation will at least only trigger a restart of the container. FTS related Dovecot commands \u00b6 # single user docker - compose exec dovecot - mailcow doveadm fts rescan - u user @ domain # all users docker - compose exec dovecot - mailcow doveadm fts rescan - A Dovecot Wiki: \"Scan what mails exist in the full text search index and compare those to what actually exist in mailboxes. This removes mails from the index that have already been expunged and makes sure that the next doveadm index will index all the missing mails (if any).\" This does not re-index a mailbox. It basically repairs a given index. If you want to re-index data immediately, you can run the followig command, where '*' can also be a mailbox mask like 'Sent'. You do not need to run these commands, but it will speed things up a bit: # single user docker - compose exec dovecot - mailcow doveadm index - u user @ domain ' * ' # all users , but obviously slower and more dangerous docker - compose exec dovecot - mailcow doveadm index - A ' * ' This will take some time depending on your machine and Solr can run oom, monitor it! Because re-indexing is very sensible, we did not include it to mailcow UI. You will need to take care of any errors while re-indexing a mailbox. Delete mailbox data \u00b6 mailcow will purge index data of a user when deleting a mailbox.","title":"FTS (Solr)"},{"location":"u_e-dovecot-fts/#fts-related-dovecot-commands","text":"# single user docker - compose exec dovecot - mailcow doveadm fts rescan - u user @ domain # all users docker - compose exec dovecot - mailcow doveadm fts rescan - A Dovecot Wiki: \"Scan what mails exist in the full text search index and compare those to what actually exist in mailboxes. This removes mails from the index that have already been expunged and makes sure that the next doveadm index will index all the missing mails (if any).\" This does not re-index a mailbox. It basically repairs a given index. If you want to re-index data immediately, you can run the followig command, where '*' can also be a mailbox mask like 'Sent'. You do not need to run these commands, but it will speed things up a bit: # single user docker - compose exec dovecot - mailcow doveadm index - u user @ domain ' * ' # all users , but obviously slower and more dangerous docker - compose exec dovecot - mailcow doveadm index - A ' * ' This will take some time depending on your machine and Solr can run oom, monitor it! Because re-indexing is very sensible, we did not include it to mailcow UI. You will need to take care of any errors while re-indexing a mailbox.","title":"FTS related Dovecot commands"},{"location":"u_e-dovecot-fts/#delete-mailbox-data","text":"mailcow will purge index data of a user when deleting a mailbox.","title":"Delete mailbox data"},{"location":"u_e-dovecot-idle_interval/","text":"Changing the IMAP IDLE interval \u00b6 What is the IDLE interval? \u00b6 Per default, Dovecot sends a \"I'm still here\" notification to every client that has an open connection with Dovecot to get mails as quickly as possible without manually polling it (IMAP PUSH). This notification is controlled by the setting imap_idle_notify_interval , which defaults to 2 minutes. A short interval results in the client getting a lot of messages for this connection, which is bad for mobile devices, because every time the device receives this message, the mailing app has to wake up. This can result in unnecessary battery drain. Edit the value \u00b6 Change configuration \u00b6 Create a new file data/conf/dovecot/extra.conf (or edit it if it already exists). Insert the setting followed by the new value. For example, to set the interval to 5 minutes you could type: imap_idle_notify_interval = 5 mins 29 minutes is the maximum value allowed by the corresponding RFC . Warning This isn't a default setting in mailcow because we don't know how this setting changes the behavior of other clients. Be careful if you change this and monitor different behavior. Reload Dovecot \u00b6 Now reload Dovecot: docker - compose exec dovecot - mailcow dovecot reload Info You can check the value of this setting with docker - compose exec dovecot - mailcow dovecot - a | grep \" imap_idle_notify_interval \" If you didn't change it, it should be at 2m. If you did change it, you should see your new value.","title":"IMAP IDLE interval"},{"location":"u_e-dovecot-idle_interval/#changing-the-imap-idle-interval","text":"","title":"Changing the IMAP IDLE interval"},{"location":"u_e-dovecot-idle_interval/#what-is-the-idle-interval","text":"Per default, Dovecot sends a \"I'm still here\" notification to every client that has an open connection with Dovecot to get mails as quickly as possible without manually polling it (IMAP PUSH). This notification is controlled by the setting imap_idle_notify_interval , which defaults to 2 minutes. A short interval results in the client getting a lot of messages for this connection, which is bad for mobile devices, because every time the device receives this message, the mailing app has to wake up. This can result in unnecessary battery drain.","title":"What is the IDLE interval?"},{"location":"u_e-dovecot-idle_interval/#edit-the-value","text":"","title":"Edit the value"},{"location":"u_e-dovecot-idle_interval/#change-configuration","text":"Create a new file data/conf/dovecot/extra.conf (or edit it if it already exists). Insert the setting followed by the new value. For example, to set the interval to 5 minutes you could type: imap_idle_notify_interval = 5 mins 29 minutes is the maximum value allowed by the corresponding RFC . Warning This isn't a default setting in mailcow because we don't know how this setting changes the behavior of other clients. Be careful if you change this and monitor different behavior.","title":"Change configuration"},{"location":"u_e-dovecot-idle_interval/#reload-dovecot","text":"Now reload Dovecot: docker - compose exec dovecot - mailcow dovecot reload Info You can check the value of this setting with docker - compose exec dovecot - mailcow dovecot - a | grep \" imap_idle_notify_interval \" If you didn't change it, it should be at 2m. If you did change it, you should see your new value.","title":"Reload Dovecot"},{"location":"u_e-dovecot-mail-crypt/","text":"Mails are stored encrypted, the key pair can be found in crypt-vol-1. If you want to decode/encode existing maildir files, you can use the following script at your own risk: Enter Dovecot by running docker-compose exec dovecot-mailcow /bin/bash in the mailcow-dockerized location. # Decrypt / var / vmail find / var / vmail / - type f - regextype egrep - regex ' .*S=.*W=.* ' | while read - r file ; do if [[ $ ( head - c7 \" $file \" ) == \" CRYPTED \" ]] ; then doveadm fs get crypt private_key_path =/ mail_crypt / ecprivkey . pem : public_key_path =/ mail_crypt / ecpubkey . pem : posix : prefix =/ \\ \" $file \" > \" /tmp/$(basename \" $f ile \" ) \" chmod 600 \" /tmp/$(basename \" $f ile \" ) \" chown 5000 : 5000 \" /tmp/$(basename \" $f ile \" ) \" mv \" /tmp/$(basename \" $f ile \" ) \" \" $file \" fi done # Encrypt / var / vmail find / var / vmail / - type f - regextype egrep - regex ' .*S=.*W=.* ' | while read - r file ; do if [[ $ ( head - c7 \" $file \" ) != \" CRYPTED \" ]] ; then doveadm fs put crypt private_key_path =/ mail_crypt / ecprivkey . pem : public_key_path =/ mail_crypt / ecpubkey . pem : posix : prefix =/ \\ \" $file \" \" $file \" chmod 600 \" $file \" chown 5000 : 5000 \" $file \" fi done","title":"Mail crypt"},{"location":"u_e-dovecot-more/","text":"Here is just an unsorted list of useful doveadm commands that could be useful. doveadm quota \u00b6 The quota get and quota recalc 1 commands are used to display or recalculate the current user's quota usage. The reported values are in kilobytes . To list the current quota status for a user / mailbox, do: doveadm quota get - u 'mailbox@example.org' To list the quota storage value for all users, do: doveadm quota get - A | grep \"STORAGE\" Recalculate a single user's quota usage: doveadm quota recalc - u 'mailbox@example.org' doveadm search \u00b6 The doveadm search 2 command is used to find messages matching your query. It can return the username, mailbox-GUID / -UID and message-GUIDs / -UIDs. To view the number of messages, by user, in their .Trash folder: doveadm search - A mailbox 'Trash' | awk '{print $1}' | sort | uniq - c Show all messages in a user's inbox older then 90 days: doveadm search - u 'mailbox@example.org' mailbox 'INBOX' savedbefore 90 d Show all messages in any folder that are older then 30 days for mailbox@example.org : doveadm search - u 'mailbox@example.org' mailbox \"*\" savedbefore 30 d https://wiki.dovecot.org/Tools/Doveadm/Quota \u21a9 https://wiki.dovecot.org/Tools/Doveadm/Search \u21a9","title":"More Examples with DOVEADM"},{"location":"u_e-dovecot-more/#doveadm-quota","text":"The quota get and quota recalc 1 commands are used to display or recalculate the current user's quota usage. The reported values are in kilobytes . To list the current quota status for a user / mailbox, do: doveadm quota get - u 'mailbox@example.org' To list the quota storage value for all users, do: doveadm quota get - A | grep \"STORAGE\" Recalculate a single user's quota usage: doveadm quota recalc - u 'mailbox@example.org'","title":"doveadm quota"},{"location":"u_e-dovecot-more/#doveadm-search","text":"The doveadm search 2 command is used to find messages matching your query. It can return the username, mailbox-GUID / -UID and message-GUIDs / -UIDs. To view the number of messages, by user, in their .Trash folder: doveadm search - A mailbox 'Trash' | awk '{print $1}' | sort | uniq - c Show all messages in a user's inbox older then 90 days: doveadm search - u 'mailbox@example.org' mailbox 'INBOX' savedbefore 90 d Show all messages in any folder that are older then 30 days for mailbox@example.org : doveadm search - u 'mailbox@example.org' mailbox \"*\" savedbefore 30 d https://wiki.dovecot.org/Tools/Doveadm/Quota \u21a9 https://wiki.dovecot.org/Tools/Doveadm/Search \u21a9","title":"doveadm search"},{"location":"u_e-dovecot-vmail-volume/","text":"If you want to use another folder for the vmail-volume, you can create an docker-compose.override.yml file and add: version : '2.1' volumes : vmail - vol - 1 : driver_opts : type : none device : / data / mailcow / vmail o : bind Moving an existing vmail folder: \u00b6 Locate the current vmail folder by its \"Mountpoint\" attribute: docker volume inspect mailcowdockerized_vmail-vol-1 [ { \"CreatedAt\" : \"2019-06-16T22:08:34+02:00\" , \"Driver\" : \"local\" , \"Labels\" : { \"com.docker.compose.project\" : \"mailcowdockerized\" , \"com.docker.compose.version\" : \"1.23.2\" , \"com.docker.compose.volume\" : \"vmail-vol-1\" } , \"Mountpoint\" : \"/var/lib/docker/volumes/mailcowdockerized_vmail-vol-1/_data\" , \"Name\" : \"mailcowdockerized_vmail-vol-1\" , \"Options\" : null , \"Scope\" : \"local\" } ] Copy the content of the Mountpoint folder to the new location (e.g. /data/mailcow/vmail ) using cp -a , rsync -a or a similar non strcuture breaking copy command Stop mailcow by executing docker-compose down from within your mailcow root folder (e.g. /opt/mailcow-dockerized ) Create the file docker-compose.override.yml , edit the device path accordingly Delete the current vmail folder: docker volume rm mailcowdockerized_vmail-vol-1 Start mailcow by executing docker-compose up -d from within your mailcow root folder (e.g. /opt/mailcow-dockerized )","title":"Move vmail volume"},{"location":"u_e-dovecot-vmail-volume/#moving-an-existing-vmail-folder","text":"Locate the current vmail folder by its \"Mountpoint\" attribute: docker volume inspect mailcowdockerized_vmail-vol-1 [ { \"CreatedAt\" : \"2019-06-16T22:08:34+02:00\" , \"Driver\" : \"local\" , \"Labels\" : { \"com.docker.compose.project\" : \"mailcowdockerized\" , \"com.docker.compose.version\" : \"1.23.2\" , \"com.docker.compose.volume\" : \"vmail-vol-1\" } , \"Mountpoint\" : \"/var/lib/docker/volumes/mailcowdockerized_vmail-vol-1/_data\" , \"Name\" : \"mailcowdockerized_vmail-vol-1\" , \"Options\" : null , \"Scope\" : \"local\" } ] Copy the content of the Mountpoint folder to the new location (e.g. /data/mailcow/vmail ) using cp -a , rsync -a or a similar non strcuture breaking copy command Stop mailcow by executing docker-compose down from within your mailcow root folder (e.g. /opt/mailcow-dockerized ) Create the file docker-compose.override.yml , edit the device path accordingly Delete the current vmail folder: docker volume rm mailcowdockerized_vmail-vol-1 Start mailcow by executing docker-compose up -d from within your mailcow root folder (e.g. /opt/mailcow-dockerized )","title":"Moving an existing vmail folder:"},{"location":"u_e-mailcow_ui-bl_wl/","text":"To add or edit an entry to your domain wide filter table, login to your mailcow UI as (domain) administrator. Info Be aware that a user may override this setting by setting his own black- and whitelist!","title":"Blacklist / Whitelist"},{"location":"u_e-mailcow_ui-config/","text":"Several configuration parameters of the mailcow UI can be changed by creating a file data/web/inc/vars.local.inc.php which overrides defaults settings found in data/web/inc/vars.inc.php . The local configuration file is persistent over updates of mailcow. Try not to change values inside data/web/inc/vars.inc.php , but use them as template for the local override. mailcow UI configuration parameters can be used to... ...change the default language 1 ...change the default bootstrap theme ...set a password complexity regex ...enable DKIM private key visibility ...set a pagination trigger size ...set default mailbox attributes ...change session lifetimes ...create fixed app menus (which cannot be changed in mailcow UI) ...set a default \"To\" field for relayhost tests ...set a timeout for Docker API requests ...toggle IP anonymization To change SOGos default language, you will need to edit data/conf/sogo/sogo.conf and replace \"English\" by your preferred language. \u21a9","title":"Configuration"},{"location":"u_e-mailcow_ui-spamalias/","text":"These temporary email aliases are mostly used for places where we need to provide an email address but don't want future correspondence with. They are also called spam alias. To create, delete or extend a temporary email aliases you need to login to mailcow's UI as a mailbox user and navigate to the tab Temporary email aliases :","title":"Temporary email aliase"},{"location":"u_e-mailcow_ui-spamfilter/","text":"A mailbox user may adjust the spam filter and black- / whitelist settings for his mailbox individually by navigating to the Spam filter tab in the users mailcow UI. Info For global adjustments on your spam filter please check our section on Rspamd . For a domain wide black- and whitelist please check our guide on Black / Whitelist","title":"Spamfilter"},{"location":"u_e-mailcow_ui-tagging/","text":"Mailbox users can tag their mail address like in me+facebook@example.org . They can control the tag handling in the users mailcow UI panel. Available Actions \u00b6 1. Move this message to a sub folder \"facebook\" (will be created lower case if not existing) 2. Prepend the tag to the subject: \"[facebook] Subject\"","title":"Tagging"},{"location":"u_e-mailcow_ui-tagging/#available-actions","text":"1. Move this message to a sub folder \"facebook\" (will be created lower case if not existing) 2. Prepend the tag to the subject: \"[facebook] Subject\"","title":"Available Actions"},{"location":"u_e-mailcow_ui-tfa/","text":"So far three methods for Two-Factor Authentication are implemented: U2F, Yubi OTP, and TOTP For U2F to work, you need an encrypted connection to the server (HTTPS) as well as a FIDO security key. Both U2F and Yubi OTP work well with the fantastic Yubikey . While Yubi OTP needs an active internet connection and an API ID + key, U2F will work with any FIDO U2F USB key out of the box, but can only be used when mailcow is accessed over HTTPS. U2F and Yubi OTP support multiple keys per user. As the third TFA method mailcow uses TOTP: time-based one-time passwords. Those passwords can be generated with apps like \"Google Authenticator\" after initially scanning a QR code or entering the given secret manually. As administrator you are able to temporary disable a domain administrators TFA login until they successfully logged in. The key used to login will be displayed in green, while other keys remain grey. Yubi OTP \u00b6 The Yubi API ID and Key will be checked against the Yubico Cloud API. When setting up TFA you will be asked for your personal API account for this key. The API ID, API key and the first 12 characters (your YubiKeys ID in modhex) are stored in the MySQL table as secret. U2F \u00b6 Only Google Chrome (+derivatives) and Opera support U2F authentication to this day natively. For Firefox you will need to install the \"U2F Support Add-on\" as provided on mozilla.org . U2F works without an internet connection. TOTP \u00b6 The best known TFA method mostly used with a smartphone.","title":"Two-Factor Authentication"},{"location":"u_e-mailcow_ui-tfa/#yubi-otp","text":"The Yubi API ID and Key will be checked against the Yubico Cloud API. When setting up TFA you will be asked for your personal API account for this key. The API ID, API key and the first 12 characters (your YubiKeys ID in modhex) are stored in the MySQL table as secret.","title":"Yubi OTP"},{"location":"u_e-mailcow_ui-tfa/#u2f","text":"Only Google Chrome (+derivatives) and Opera support U2F authentication to this day natively. For Firefox you will need to install the \"U2F Support Add-on\" as provided on mozilla.org . U2F works without an internet connection.","title":"U2F"},{"location":"u_e-mailcow_ui-tfa/#totp","text":"The best known TFA method mostly used with a smartphone.","title":"TOTP"},{"location":"u_e-nginx/","text":"To create persistent (over updates) sites hosted by mailcow: dockerized, a new site configuration must be placed inside data/conf/nginx/ : nano data / conf / nginx / my_custom_site . conf The filename is not important, as long as the filename carries a .conf extension. It is also possible to extend the configuration of the default file site.conf file: nano data / conf / nginx / site . my_content . custom This filename does not need to have a \".conf\" extension, but follows the pattern site.*.custom , where * is a custom name. If PHP is to be included in a custom site, please use the PHP-FPM listener on phpfpm:9002 or create a new listener in data/conf/phpfpm/php-fpm.d/pools.conf . Restart Nginx (and PHP-FPM, if a new listener was created): docker - compose restart nginx - mailcow docker - compose restart php - fpm - mailcow","title":"Custom sites"},{"location":"u_e-postfix-attachment_size/","text":"Open data/conf/postfix/main.cf and set the message_size_limit accordingly in bytes. Restart Postfix: docker - compose restart postfix - mailcow","title":"Max. message size (attachment size)"},{"location":"u_e-postfix-disable_sender_verification/","text":"New guide \u00b6 Edit a mailbox and select \"Allow to send as *\". For historical reasons we kept the old and deprecated guide below: Deprecated guide \u00b6 This option is not best-practice and should only be implemented when there is no other option available to achieve whatever you are trying to do. Simply create a file data/conf/postfix/check_sasl_access and enter the following content. This user must exist in your installation and needs to authenticate before sending mail. user - to - allow - everything @example . com OK Open data/conf/postfix/main.cf and find smtpd_sender_restrictions . Prepend check_sasl_access hash:/opt/postfix/conf/check_sasl_access like this: smtpd_sender_restrictions = check_sasl_access hash : / opt / postfix / conf / check_sasl_access reject_authenticated_sender_login_mismatch [...] Run postmap on check_sasl_access: docker - compose exec postfix - mailcow postmap / opt / postfix / conf / check_sasl_access Restart the Postfix container.","title":"Disable Sender Addresses Verification"},{"location":"u_e-postfix-disable_sender_verification/#new-guide","text":"Edit a mailbox and select \"Allow to send as *\". For historical reasons we kept the old and deprecated guide below:","title":"New guide"},{"location":"u_e-postfix-disable_sender_verification/#deprecated-guide","text":"This option is not best-practice and should only be implemented when there is no other option available to achieve whatever you are trying to do. Simply create a file data/conf/postfix/check_sasl_access and enter the following content. This user must exist in your installation and needs to authenticate before sending mail. user - to - allow - everything @example . com OK Open data/conf/postfix/main.cf and find smtpd_sender_restrictions . Prepend check_sasl_access hash:/opt/postfix/conf/check_sasl_access like this: smtpd_sender_restrictions = check_sasl_access hash : / opt / postfix / conf / check_sasl_access reject_authenticated_sender_login_mismatch [...] Run postmap on check_sasl_access: docker - compose exec postfix - mailcow postmap / opt / postfix / conf / check_sasl_access Restart the Postfix container.","title":"Deprecated guide"},{"location":"u_e-postfix-pflogsumm/","text":"To use pflogsumm with the default logging driver, we need to query postfix-mailcow via docker logs and pipe the output to pflogsumm: docker logs --since 24h $(docker ps -qf name=postfix-mailcow) | pflogsumm The above log output is limited to the past 24 hours. It's also possible to create a daily pflogsumm report via cron. Create the file /etc/cron.d/pflogsumm with the following content: SHELL =/ bin / bash 59 23 * * * root docker logs --since 24h $(docker ps -qf name=postfix-mailcow) | /usr/sbin/pflogsumm -d today | mail -s \"Postfix Report of $(date)\" postmaster@example.net Based on the last 24h postfix logs, this example sends every day at 23:59:00 a pflogsumm report to postmaster@example.net .","title":"Statistics with pflogsumm"},{"location":"u_e-postfix-postscreen_whitelist/","text":"IPs can be removed from Postscreen and therefore also from RBL checks in data/conf/postfix/postscreen_access.cidr . Postscreen does multiple checks to identify malicious senders. In most cases you want to whitelist an IP to exclude it from blacklist lookups.","title":"Whitelist IP in Postscreen"},{"location":"u_e-redis/","text":"Redis is used as a key-value store for rspamd's and (some of) mailcow's settings and data. If you are unfamiliar with redis please read the introduction to redis and maybe visit this wonderfull guide on how to use it. Client \u00b6 To connect to the redis cli execute: docker - compose exec redis - mailcow redis - cli Debugging \u00b6 Here are some usefull commands for the redis-cli for debugging: MONITOR \u00b6 Listens for all requests received by the server in real time: # docker - compose exec redis - mailcow redis - cli 127 . 0 . 0 . 1 : 6379 > monitor OK 1494077286 . 401963 [ 0 172 . 22 . 1 . 253 : 41228 ] \" SMEMBERS \" \" BAYES_SPAM_keys \" 1494077288 . 292970 [ 0 172 . 22 . 1 . 253 : 41229 ] \" SMEMBERS \" \" BAYES_SPAM_keys \" [...] KEYS \u00b6 Get all keys matching your pattern: KEYS * PING \u00b6 Test a connection: 127 . 0 . 0 . 1 : 6379 > PING PONG If you want to know more, here is a cheat sheet .","title":"Redis"},{"location":"u_e-redis/#client","text":"To connect to the redis cli execute: docker - compose exec redis - mailcow redis - cli","title":"Client"},{"location":"u_e-redis/#debugging","text":"Here are some usefull commands for the redis-cli for debugging:","title":"Debugging"},{"location":"u_e-redis/#monitor","text":"Listens for all requests received by the server in real time: # docker - compose exec redis - mailcow redis - cli 127 . 0 . 0 . 1 : 6379 > monitor OK 1494077286 . 401963 [ 0 172 . 22 . 1 . 253 : 41228 ] \" SMEMBERS \" \" BAYES_SPAM_keys \" 1494077288 . 292970 [ 0 172 . 22 . 1 . 253 : 41229 ] \" SMEMBERS \" \" BAYES_SPAM_keys \" [...]","title":"MONITOR"},{"location":"u_e-redis/#keys","text":"Get all keys matching your pattern: KEYS *","title":"KEYS"},{"location":"u_e-redis/#ping","text":"Test a connection: 127 . 0 . 0 . 1 : 6379 > PING PONG If you want to know more, here is a cheat sheet .","title":"PING"},{"location":"u_e-rspamd/","text":"Rspamd is used for AV handling, DKIM signing and SPAM handling. It's a powerful and fast filter system. For a more in-depth documentation on Rspamd please visit its own documentation . Learn Spam & Ham \u00b6 Rspamd learns mail as spam or ham when you move a message in or out of the junk folder to any mailbox besides trash. This is achieved by using the Dovecot plugin \"antispam\" and a simple parser script. Rspamd also auto-learns mail when a high or low score is detected (see https://rspamd.com/doc/configuration/statistic.html#autolearning ) The bayes statistics are written to Redis as keys BAYES_HAM and BAYES_SPAM . You can also use Rspamd's web UI to learn ham and / or spam or to adjust certain settings of Rspamd. Learn Spam or Ham from existing directory \u00b6 You can use a one-liner to learn mail in plain-text (uncompressed) format: # Ham for file in / my / folder / cur /*; do docker exec -i $(docker-compose ps -q rspamd-mailcow) rspamc learn_ham < $file; done # Spam for file in /my/folder/.Junk/cur/*; do docker exec -i $(docker-compose ps -q rspamd-mailcow) rspamc learn_spam < $file; done Consider attaching a local folder as new volume to rspamd-mailcow in docker-compose.yml and learn given files inside the container. This can be used as workaround to parse compressed data with zcat. Example: for file in / data / old_mail / . Junk / cur /*; do rspamc learn_spam < zcat $file; done Reset learned data \u00b6 You need to delete keys in Redis to reset learned mail, so create a copy of your Redis database now: Backup database # It is better to stop Redis before you copy the file . cp / var / lib / docker / volumes / mailcowdockerized_redis - vol - 1 / _data / dump . rdb / root / Reset Bayes data docker - compose exec redis - mailcow sh - c ' redis-cli --scan --pattern BAYES_* | xargs redis-cli del ' docker - compose exec redis - mailcow sh - c ' redis-cli --scan --pattern RS* | xargs redis-cli del ' If it complains about... ( error ) ERR wrong number of arguments for ' del ' command ...the key pattern was not found and thus no data is available to delete. CLI tools \u00b6 docker - compose exec rspamd - mailcow rspamc -- help docker - compose exec rspamd - mailcow rspamadm -- help Disable Greylisting \u00b6 You can disable rspamd's greylisting server-wide by editing: {mailcow-dir}/data/conf/rspamd/local.d/greylist.conf Simply add the line: enabled = false; Save the file and then restart the rspamd container. See Rspamd documentation Whitelist specific ClamAV signatures \u00b6 You may find that legitimate (clean) mail is being blocked by ClamAV (Rspamd will flag the mail with VIRUS_FOUND ). For instance, interactive PDF form attachments are blocked by default because the embedded Javascript code may be used for nefarious purposes. Confirm by looking at the clamd logs, e.g.: docker-compose logs clamd-mailcow | grep FOUND This line confirms that such was identified: clamd-mailcow_1 | Sat Sep 28 07:43:24 2019 -> instream(local): PUA.Pdf.Trojan.EmbeddedJavaScript-1(e887d2ac324ce90750768b86b63d0749:363325) FOUND To whitelist this particular signature (and enable sending this type of file attached), add it to the ClamAV signature whitelist file: echo 'PUA.Pdf.Trojan.EmbeddedJavaScript-1' >> data/conf/clamav/whitelist.ign2 Then restart the clamd-mailcow service container in the mailcow UI, or using docker-compose: docker-compose restart clamd-mailcow","title":"Rspamd"},{"location":"u_e-rspamd/#learn-spam-ham","text":"Rspamd learns mail as spam or ham when you move a message in or out of the junk folder to any mailbox besides trash. This is achieved by using the Dovecot plugin \"antispam\" and a simple parser script. Rspamd also auto-learns mail when a high or low score is detected (see https://rspamd.com/doc/configuration/statistic.html#autolearning ) The bayes statistics are written to Redis as keys BAYES_HAM and BAYES_SPAM . You can also use Rspamd's web UI to learn ham and / or spam or to adjust certain settings of Rspamd.","title":"Learn Spam &amp; Ham"},{"location":"u_e-rspamd/#learn-spam-or-ham-from-existing-directory","text":"You can use a one-liner to learn mail in plain-text (uncompressed) format: # Ham for file in / my / folder / cur /*; do docker exec -i $(docker-compose ps -q rspamd-mailcow) rspamc learn_ham < $file; done # Spam for file in /my/folder/.Junk/cur/*; do docker exec -i $(docker-compose ps -q rspamd-mailcow) rspamc learn_spam < $file; done Consider attaching a local folder as new volume to rspamd-mailcow in docker-compose.yml and learn given files inside the container. This can be used as workaround to parse compressed data with zcat. Example: for file in / data / old_mail / . Junk / cur /*; do rspamc learn_spam < zcat $file; done","title":"Learn Spam or Ham from existing directory"},{"location":"u_e-rspamd/#reset-learned-data","text":"You need to delete keys in Redis to reset learned mail, so create a copy of your Redis database now: Backup database # It is better to stop Redis before you copy the file . cp / var / lib / docker / volumes / mailcowdockerized_redis - vol - 1 / _data / dump . rdb / root / Reset Bayes data docker - compose exec redis - mailcow sh - c ' redis-cli --scan --pattern BAYES_* | xargs redis-cli del ' docker - compose exec redis - mailcow sh - c ' redis-cli --scan --pattern RS* | xargs redis-cli del ' If it complains about... ( error ) ERR wrong number of arguments for ' del ' command ...the key pattern was not found and thus no data is available to delete.","title":"Reset learned data"},{"location":"u_e-rspamd/#cli-tools","text":"docker - compose exec rspamd - mailcow rspamc -- help docker - compose exec rspamd - mailcow rspamadm -- help","title":"CLI tools"},{"location":"u_e-rspamd/#disable-greylisting","text":"You can disable rspamd's greylisting server-wide by editing: {mailcow-dir}/data/conf/rspamd/local.d/greylist.conf Simply add the line: enabled = false; Save the file and then restart the rspamd container. See Rspamd documentation","title":"Disable Greylisting"},{"location":"u_e-rspamd/#whitelist-specific-clamav-signatures","text":"You may find that legitimate (clean) mail is being blocked by ClamAV (Rspamd will flag the mail with VIRUS_FOUND ). For instance, interactive PDF form attachments are blocked by default because the embedded Javascript code may be used for nefarious purposes. Confirm by looking at the clamd logs, e.g.: docker-compose logs clamd-mailcow | grep FOUND This line confirms that such was identified: clamd-mailcow_1 | Sat Sep 28 07:43:24 2019 -> instream(local): PUA.Pdf.Trojan.EmbeddedJavaScript-1(e887d2ac324ce90750768b86b63d0749:363325) FOUND To whitelist this particular signature (and enable sending this type of file attached), add it to the ClamAV signature whitelist file: echo 'PUA.Pdf.Trojan.EmbeddedJavaScript-1' >> data/conf/clamav/whitelist.ign2 Then restart the clamd-mailcow service container in the mailcow UI, or using docker-compose: docker-compose restart clamd-mailcow","title":"Whitelist specific ClamAV signatures"},{"location":"u_e-sogo/","text":"SOGo is used for accessing your mails via a webbrowser, adding and sharing your contacts or calendars. For a more in-depth documentation on SOGo please visit its own documentation . Change Theme \u00b6 As of December 21 2018 we removed our custom themes due to complains about missing colors in some address book and calendar sections. Some other problems were still existing and would not be fixed in the near future (switching colors on login screen, for example). Change Logo \u00b6 mailcow builds after 21 December 2018 can change SOGo's logo by replacing data/conf/sogo/sogo-full.svg . After you replaced said file you need to restart SOGo and Memcached containers by executing docker-compose restart memcached-mailcow sogo-mailcow .","title":"SOGo"},{"location":"u_e-sogo/#change-theme","text":"As of December 21 2018 we removed our custom themes due to complains about missing colors in some address book and calendar sections. Some other problems were still existing and would not be fixed in the near future (switching colors on login screen, for example).","title":"Change Theme"},{"location":"u_e-sogo/#change-logo","text":"mailcow builds after 21 December 2018 can change SOGo's logo by replacing data/conf/sogo/sogo-full.svg . After you replaced said file you need to restart SOGo and Memcached containers by executing docker-compose restart memcached-mailcow sogo-mailcow .","title":"Change Logo"},{"location":"u_e-unbound-fwd/","text":"If you want or have to use an external DNS service, you can define it in data/conf/unbound/unbound.conf : forward - zone : name : \".\" forward - addr : 8 . 8 . 8 . 8 forward - addr : 8 . 8 . 4 . 4 Please do not use a public resolver like we did in the example above. Many - if not all - blacklist lookups will fail with public resolvers. Important : Only DNSSEC validating DNS services will work. Restart Unbound after changing its config file: docker - compose restart unbound - mailcow","title":"Using an external DNS service"},{"location":"u_e-webmail-site/","text":"To create a subdomain webmail.example.org and redirect it to SOGo, you need to create a new Nginx site. Take care of \"CHANGE_TO_MAILCOW_HOSTNAME\"! nano data/conf/nginx/webmail.conf server { ssl_certificate / etc / ssl / mail / cert . pem ; ssl_certificate_key / etc / ssl / mail / key . pem ; index index . php index . html ; client_max_body_size 0 ; root / web ; include / etc / nginx / conf . d / listen_plain . active ; include / etc / nginx / conf . d / listen_ssl . active ; server_name webmail . example . org ; location ^~ / . well - known / acme - challenge / { allow all ; default_type \" text/plain \" ; } location / { return 301 https : // CHANGE_TO_MAILCOW_HOSTNAME / SOGo ; } } Save and restart Nginx: docker-compose restart nginx-mailcow . Now open mailcow.conf and find ADDITIONAL_SAN . Add webmail.example.org to this array, don't use quotes! ADDITIONAL_SAN = webmail . example . org Run docker-compose up -d . See \"acme-mailcow\" and \"nginx-mailcow\" logs if anything fails.","title":"Create subdomain webmail.example.org"},{"location":"u_e-why_unbound/","text":"For DNS blacklist lookups and DNSSEC. Most systems use either a public or a local caching DNS resolver. That's a very bad idea when it comes to filter spam using DNS-based black hole lists (DNSBL) or similar technics. Most if not all providers apply a rate limit based on the DNS resolver that is used to query their service. Using a public resolver like Googles 4x8, OpenDNS or any other shared DNS resolver like your ISPs will hit that limit very soon.","title":"Why unbound?"},{"location":"client/client-android/","text":"Open the Email app. If this is your first email account, tap Add Account ; if not, tap More and Settings and then Add account . Select Microsoft Exchange ActiveSync . Enter your email address ( ) and password. Tap Sign in .","title":"Android"},{"location":"client/client-apple/","text":"Method 1 via Mobileconfig \u00b6 Email, contacts and calendars can be configured automatically on Apple devices by installing a profile. To download a profile you must login to the mailcow UI first. Method 1.1: IMAP, SMTP and Cal/CardDAV \u00b6 This method configures IMAP, CardDAV and CalDAV. Download and open the file from https://${MAILCOW_HOSTNAME}/mobileconfig.php mailcow.mobileconfig . Enter the unlock code (iPhone) or computer password (Mac). Enter your email password three times when prompted. Method 1.2: IMAP, SMTP (no DAV) \u00b6 This method configures IMAP and SMTP only. Download and open the file from https://${MAILCOW_HOSTNAME}/mobileconfig.php?only_email mailcow.mobileconfig . Enter the unlock code (iPhone) or computer password (Mac). Enter your email password when prompted. Method 2 (Exchange ActiveSync emulation) \u00b6 On iOS, Exchange ActiveSync is also supported as an alternative to the procedure above. It has the advantage of supporting push email (i.e. you are immediately notified of incoming messages), but has some limitations, e.g. it does not support more than three email addresses per contact in your address book. Follow the steps below if you decide to use Exchange instead. Open the Settings app, tap Mail , tap Accounts , tap Add Acccount , select Exchange . Enter your email address ( ) and tap Next . Enter your password, tap Next again. Finally, tap Save .","title":"Apple macOS / iOS"},{"location":"client/client-apple/#method-1-via-mobileconfig","text":"Email, contacts and calendars can be configured automatically on Apple devices by installing a profile. To download a profile you must login to the mailcow UI first.","title":"Method 1 via Mobileconfig"},{"location":"client/client-apple/#method-11-imap-smtp-and-calcarddav","text":"This method configures IMAP, CardDAV and CalDAV. Download and open the file from https://${MAILCOW_HOSTNAME}/mobileconfig.php mailcow.mobileconfig . Enter the unlock code (iPhone) or computer password (Mac). Enter your email password three times when prompted.","title":"Method 1.1: IMAP, SMTP and Cal/CardDAV"},{"location":"client/client-apple/#method-12-imap-smtp-no-dav","text":"This method configures IMAP and SMTP only. Download and open the file from https://${MAILCOW_HOSTNAME}/mobileconfig.php?only_email mailcow.mobileconfig . Enter the unlock code (iPhone) or computer password (Mac). Enter your email password when prompted.","title":"Method 1.2: IMAP, SMTP (no DAV)"},{"location":"client/client-apple/#method-2-exchange-activesync-emulation","text":"On iOS, Exchange ActiveSync is also supported as an alternative to the procedure above. It has the advantage of supporting push email (i.e. you are immediately notified of incoming messages), but has some limitations, e.g. it does not support more than three email addresses per contact in your address book. Follow the steps below if you decide to use Exchange instead. Open the Settings app, tap Mail , tap Accounts , tap Add Acccount , select Exchange . Enter your email address ( ) and tap Next . Enter your password, tap Next again. Finally, tap Save .","title":"Method 2 (Exchange ActiveSync emulation)"},{"location":"client/client-emclient/","text":"Launch eM Client. If this is the first time you launched eM Client, it asks you to set up your account. Proceed to step 4. Go to Menu at the top, select Tools and Accounts . Enter your email address ( ) and click Start Now . Enter your password and click Continue . Enter your name ( ) and click Next . Click Finish .","title":"eM Client"},{"location":"client/client-kontact/","text":"Launch Kontact. If this is the first time you launched Kontact or KMail, it asks you to set up your account. Proceed to step 4. Go to Mail in the sidebar. Go to the Tools menu and select Account Wizard . Enter your name ( ) , email address ( ) and your password. Click Next . Click Create Account . If prompted, re-enter your password and click OK . Close the window by clicking Finish . Go to Calendar in the sidebar. Go to the Settings menu and select Configure KOrganizer . Go to the Calendars tab and click the Add button. Choose DAV groupware resource and click OK . Enter your email address ( ) and your password. Click Next . Select ScalableOGo from the dropdown menu and click Next . Enter your mailcow hostname into the Host field and click Next . Click Test Connection and then Finish . Finally, click OK twice. Once you have set up Kontact, you can also use KMail, KOrganizer and KAddressBook individually.","title":"KDE Kontact"},{"location":"client/client-manual/","text":"These instructions are valid for unchanged port bindings only! Email \u00b6 Service Encryption Host Port IMAP STARTTLS mailcow hostname 143 IMAPS SSL mailcow hostname 993 POP3 STARTTLS mailcow hostname 110 POP3S SSL mailcow hostname 995 SMTP STARTTLS mailcow hostname 587 SMTPS SSL mailcow hostname 465 Please use \"plain\" as authentication mechanisms. Contrary to the assumption no passwords will be transfered plain text, as no authentication is allowed to take place without TLS. Contacts and calendars \u00b6 SOGos default calendar (CalDAV) and contacts (CardDAV) URLs: CalDAV - https://mail.example.com/SOGo/dav/user@example.com/Calendar/personal/ CardDAV - https://mail.example.com/SOGo/dav/user@example.com/Contacts/personal/ Some applications may require you to use https://mail.example.com/SOGo/dav/ or the full path to your calender, which can be found and copied from within SOGo.","title":"Manual configuration"},{"location":"client/client-manual/#email","text":"Service Encryption Host Port IMAP STARTTLS mailcow hostname 143 IMAPS SSL mailcow hostname 993 POP3 STARTTLS mailcow hostname 110 POP3S SSL mailcow hostname 995 SMTP STARTTLS mailcow hostname 587 SMTPS SSL mailcow hostname 465 Please use \"plain\" as authentication mechanisms. Contrary to the assumption no passwords will be transfered plain text, as no authentication is allowed to take place without TLS.","title":"Email"},{"location":"client/client-manual/#contacts-and-calendars","text":"SOGos default calendar (CalDAV) and contacts (CardDAV) URLs: CalDAV - https://mail.example.com/SOGo/dav/user@example.com/Calendar/personal/ CardDAV - https://mail.example.com/SOGo/dav/user@example.com/Contacts/personal/ Some applications may require you to use https://mail.example.com/SOGo/dav/ or the full path to your calender, which can be found and copied from within SOGo.","title":"Contacts and calendars"},{"location":"client/client-outlook/","text":"Outlook 2016 or higher from Office 365 on Windows \u00b6 This is only applicable if your server administrator has not disabled EAS for Outlook. If it is disabled, please follow the guide for Outlook 2007 instead. Outlook 2016 has an issue with autodiscover . Only Outlook from Office 365 is affected. If you installed Outlook from another source, please follow the guide for Outlook 2013 or higher. For EAS you must use the old assistant by launching C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\OLCFG.EXE . If this application opens, you can go to step 4 of the guide for Outlook 2013 below. If it does not open, you can completely disable the new account creation wizard and follow the guide for Outlook 2013 below. Outlook 2013 or higher on Windows \u00b6 This is only applicable if your server administrator has not disabled EAS for Outlook. If it is disabled, please follow the guide for Outlook 2007 instead. Launch Outlook. If this is the first time you launched Outlook, it asks you to set up your account. Proceed to step 4. Go to the File menu and click Add Account . Enter your name ( ) , email address ( ) and your password. Click Next . When prompted, enter your password again, check Remember my credentials and click OK . Click the Allow button. Click Finish . Outlook 2007 or 2010 on Windows \u00b6 Outlook 2007 or higher on Windows \u00b6 Download and install Outlook CalDav Synchronizer . Launch Outlook. If this is the first time you launched Outlook, it asks you to set up your account. Proceed to step 5. Go to the File menu and click Add Account . Enter your name ( ) , email address ( ) and your password. Click Next . Click Finish . Go to the CalDav Synchronizer ribbon and click Synchronization Profiles . Click the second button at top ( Add multiple profiles ), select Sogo , click Ok . Click the Get IMAP/POP3 account settings button. Click Discover resources and assign to Outlook folders . In the Select Resource window that pops up, select your main calendar (usually Personal Calendar ), click the ... button, assign it to Calendar , and click OK . Go to the Address Books and Tasks tabs and repeat repeat the process accordingly. Do not assign multiple calendars, address books or task lists! Close all windows with the OK buttons. Outlook 2011 or higher on macOS \u00b6 The Mac version of Outlook does not synchronize calendars and contacts and therefore is not supported.","title":"Microsoft Outlook"},{"location":"client/client-outlook/#outlook-2016-or-higher-from-office-365-on-windows","text":"This is only applicable if your server administrator has not disabled EAS for Outlook. If it is disabled, please follow the guide for Outlook 2007 instead. Outlook 2016 has an issue with autodiscover . Only Outlook from Office 365 is affected. If you installed Outlook from another source, please follow the guide for Outlook 2013 or higher. For EAS you must use the old assistant by launching C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\OLCFG.EXE . If this application opens, you can go to step 4 of the guide for Outlook 2013 below. If it does not open, you can completely disable the new account creation wizard and follow the guide for Outlook 2013 below.","title":"Outlook 2016 or higher from Office 365 on Windows"},{"location":"client/client-outlook/#outlook-2013-or-higher-on-windows","text":"This is only applicable if your server administrator has not disabled EAS for Outlook. If it is disabled, please follow the guide for Outlook 2007 instead. Launch Outlook. If this is the first time you launched Outlook, it asks you to set up your account. Proceed to step 4. Go to the File menu and click Add Account . Enter your name ( ) , email address ( ) and your password. Click Next . When prompted, enter your password again, check Remember my credentials and click OK . Click the Allow button. Click Finish .","title":"Outlook 2013 or higher on Windows"},{"location":"client/client-outlook/#outlook-2007-or-2010-on-windows","text":"","title":"Outlook 2007 or 2010 on Windows"},{"location":"client/client-outlook/#outlook-2007-or-higher-on-windows","text":"Download and install Outlook CalDav Synchronizer . Launch Outlook. If this is the first time you launched Outlook, it asks you to set up your account. Proceed to step 5. Go to the File menu and click Add Account . Enter your name ( ) , email address ( ) and your password. Click Next . Click Finish . Go to the CalDav Synchronizer ribbon and click Synchronization Profiles . Click the second button at top ( Add multiple profiles ), select Sogo , click Ok . Click the Get IMAP/POP3 account settings button. Click Discover resources and assign to Outlook folders . In the Select Resource window that pops up, select your main calendar (usually Personal Calendar ), click the ... button, assign it to Calendar , and click OK . Go to the Address Books and Tasks tabs and repeat repeat the process accordingly. Do not assign multiple calendars, address books or task lists! Close all windows with the OK buttons.","title":"Outlook 2007 or higher on Windows"},{"location":"client/client-outlook/#outlook-2011-or-higher-on-macos","text":"The Mac version of Outlook does not synchronize calendars and contacts and therefore is not supported.","title":"Outlook 2011 or higher on macOS"},{"location":"client/client-thunderbird/","text":"Launch Thunderbird. If this is the first time you launched Thunderbird, it asks you whether you would like a new email address. Click Skip this and use my existing email and proceed to step 4. Go to the Tools menu and select Account Settings . Click the Account Actions dropdown menu at the bottom left and select Add Mail Account . Enter your name ( ) , email address ( ) and your password. Make sure the Remember password checkbox is selected and click Continue . Once the configuration has been automatically detected, click Done . If you already had other accounts configured in Thunderbird, select the new one ( ) on the left, click the Account Actions dropdown and select Set as Default . Close the account settings window with the OK button. In your web browser, download SOGo Connector SOGo Connector . Back in Thunderbird, go to the Tools menu and select Add-ons . Click Extensions on the left and ensure that the Lightning add-on is already installed. It is installed by default in the Windows and macOS versions of Thunderbird, but if you are running Linux and installed Thunderbird through your distribution's package manager, Lightning might be available as a separate package (e.g. xul-ext-lightning on Ubuntu). Click Extensions on the left, click the little gear icon at the top and select Install Add-on From File . Select the file you downloaded in step 9, click Open and, after waiting for a few seconds, Install Now . Click the Restart Now button at the top that appears. Thunderbird briefly shows a message that it is updating extensions, then restarts automatically once more. When you are prompted to authenticate for , enter your email address and password, check Use Password Manager and click OK . Automatic configuration of calendars and address books in Thunderbird is not currently supported. You can ask your server administrator to enable SOGo Connector if you need it. Automatic configuration of calendars and address books (from step 9 onward) in Thunderbird is only supported if your server administrator has enabled SOGo Connector .","title":"Mozilla Thunderbird"},{"location":"client/client-windows/","text":"Windows 8 and higher support email, contacts and calendar via Exchange ActiveSync. Open the Mail app. If you have not previously used Mail, you can click Add Account in the main window. Proceed to step 4. Click Accounts in the sidebar on the left, then click Add Account on the far right. Select Exchange . Enter your email address ( ) and click Next . Enter your password and click Log in . Once you have set up the Mail app, you can also use the People and Calendar apps.","title":"Windows Mail"},{"location":"client/client-windowsphone/","text":"Open the Settings app. Select email + accounts and tap add an account . Tap Exchange . Enter your email address ( ) and your password. Tap Sign in . Tap done .","title":"Windows Phone"}]}